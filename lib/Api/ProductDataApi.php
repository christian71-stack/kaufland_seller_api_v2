<?php
/**
 * ProductDataApi
 * PHP version 5
 *
 * @category Class
 * @package  Cbdesk\Kauflandv2\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * OpenAPI spec version: 2.9.1
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cbdesk\Kauflandv2\Api\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Cbdesk\Kauflandv2\Api\ApiException;
use Cbdesk\Kauflandv2\Api\Configuration;
use Cbdesk\Kauflandv2\Api\HeaderSelector;
use Cbdesk\Kauflandv2\Api\ObjectSerializer;

/**
 * ProductDataApi Class Doc Comment
 *
 * @category Class
 * @package  Cbdesk\Kauflandv2\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductDataApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createProductData
     *
     * Add new product data for an EAN or replace your existing one
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataObject $body JSON contains ean and attributes. Attributes contain all attributes with values (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponse
     */
    public function createProductData($body, $locale)
    {
        list($response) = $this->createProductDataWithHttpInfo($body, $locale);
        return $response;
    }

    /**
     * Operation createProductDataWithHttpInfo
     *
     * Add new product data for an EAN or replace your existing one
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataObject $body JSON contains ean and attributes. Attributes contain all attributes with values (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProductDataWithHttpInfo($body, $locale)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponse';
        $request = $this->createProductDataRequest($body, $locale);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProductDataAsync
     *
     * Add new product data for an EAN or replace your existing one
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataObject $body JSON contains ean and attributes. Attributes contain all attributes with values (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProductDataAsync($body, $locale)
    {
        return $this->createProductDataAsyncWithHttpInfo($body, $locale)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProductDataAsyncWithHttpInfo
     *
     * Add new product data for an EAN or replace your existing one
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataObject $body JSON contains ean and attributes. Attributes contain all attributes with values (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProductDataAsyncWithHttpInfo($body, $locale)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponse';
        $request = $this->createProductDataRequest($body, $locale);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProductData'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataObject $body JSON contains ean and attributes. Attributes contain all attributes with values (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createProductDataRequest($body, $locale)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createProductData'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling createProductData'
            );
        }

        $resourcePath = '/product-data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale, null);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProductDataFile
     *
     * Add an import file URL
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileRequestBody $body Json object with import file data (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataImportFileResponse_
     */
    public function createProductDataFile($body)
    {
        list($response) = $this->createProductDataFileWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createProductDataFileWithHttpInfo
     *
     * Add an import file URL
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileRequestBody $body Json object with import file data (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataImportFileResponse_, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProductDataFileWithHttpInfo($body)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataImportFileResponse_';
        $request = $this->createProductDataFileRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataImportFileResponse_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProductDataFileAsync
     *
     * Add an import file URL
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileRequestBody $body Json object with import file data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProductDataFileAsync($body)
    {
        return $this->createProductDataFileAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProductDataFileAsyncWithHttpInfo
     *
     * Add an import file URL
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileRequestBody $body Json object with import file data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProductDataFileAsyncWithHttpInfo($body)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataImportFileResponse_';
        $request = $this->createProductDataFileRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProductDataFile'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileRequestBody $body Json object with import file data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createProductDataFileRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createProductDataFile'
            );
        }

        $resourcePath = '/product-data/import-files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProductData
     *
     * Delete your product data for an EAN
     *
     * @param  string $ean European Article Number with 13, 14 or 15 digits (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponse
     */
    public function deleteProductData($ean, $locale)
    {
        list($response) = $this->deleteProductDataWithHttpInfo($ean, $locale);
        return $response;
    }

    /**
     * Operation deleteProductDataWithHttpInfo
     *
     * Delete your product data for an EAN
     *
     * @param  string $ean European Article Number with 13, 14 or 15 digits (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProductDataWithHttpInfo($ean, $locale)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponse';
        $request = $this->deleteProductDataRequest($ean, $locale);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\NotFoundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProductDataAsync
     *
     * Delete your product data for an EAN
     *
     * @param  string $ean European Article Number with 13, 14 or 15 digits (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProductDataAsync($ean, $locale)
    {
        return $this->deleteProductDataAsyncWithHttpInfo($ean, $locale)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProductDataAsyncWithHttpInfo
     *
     * Delete your product data for an EAN
     *
     * @param  string $ean European Article Number with 13, 14 or 15 digits (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProductDataAsyncWithHttpInfo($ean, $locale)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponse';
        $request = $this->deleteProductDataRequest($ean, $locale);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProductData'
     *
     * @param  string $ean European Article Number with 13, 14 or 15 digits (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteProductDataRequest($ean, $locale)
    {
        // verify the required parameter 'ean' is set
        if ($ean === null || (is_array($ean) && count($ean) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ean when calling deleteProductData'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling deleteProductData'
            );
        }

        $resourcePath = '/product-data/{ean}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale, null);
        }

        // path params
        if ($ean !== null) {
            $resourcePath = str_replace(
                '{' . 'ean' . '}',
                ObjectSerializer::toPathValue($ean),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductData
     *
     * Get your product data for an EAN
     *
     * @param  string $ean European Article Number with 13, 14 or 15 digits (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataObject_
     */
    public function getProductData($ean, $locale)
    {
        list($response) = $this->getProductDataWithHttpInfo($ean, $locale);
        return $response;
    }

    /**
     * Operation getProductDataWithHttpInfo
     *
     * Get your product data for an EAN
     *
     * @param  string $ean European Article Number with 13, 14 or 15 digits (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataObject_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductDataWithHttpInfo($ean, $locale)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataObject_';
        $request = $this->getProductDataRequest($ean, $locale);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataObject_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\NotFoundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductDataAsync
     *
     * Get your product data for an EAN
     *
     * @param  string $ean European Article Number with 13, 14 or 15 digits (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductDataAsync($ean, $locale)
    {
        return $this->getProductDataAsyncWithHttpInfo($ean, $locale)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductDataAsyncWithHttpInfo
     *
     * Get your product data for an EAN
     *
     * @param  string $ean European Article Number with 13, 14 or 15 digits (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductDataAsyncWithHttpInfo($ean, $locale)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataObject_';
        $request = $this->getProductDataRequest($ean, $locale);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductData'
     *
     * @param  string $ean European Article Number with 13, 14 or 15 digits (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProductDataRequest($ean, $locale)
    {
        // verify the required parameter 'ean' is set
        if ($ean === null || (is_array($ean) && count($ean) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ean when calling getProductData'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling getProductData'
            );
        }

        $resourcePath = '/product-data/{ean}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale, null);
        }

        // path params
        if ($ean !== null) {
            $resourcePath = str_replace(
                '{' . 'ean' . '}',
                ObjectSerializer::toPathValue($ean),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductDataFile
     *
     * Get import file by ID
     *
     * @param  int $id_import_file id_import_file (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataImportFileResponse_
     */
    public function getProductDataFile($id_import_file)
    {
        list($response) = $this->getProductDataFileWithHttpInfo($id_import_file);
        return $response;
    }

    /**
     * Operation getProductDataFileWithHttpInfo
     *
     * Get import file by ID
     *
     * @param  int $id_import_file (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataImportFileResponse_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductDataFileWithHttpInfo($id_import_file)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataImportFileResponse_';
        $request = $this->getProductDataFileRequest($id_import_file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataImportFileResponse_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\NotFoundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductDataFileAsync
     *
     * Get import file by ID
     *
     * @param  int $id_import_file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductDataFileAsync($id_import_file)
    {
        return $this->getProductDataFileAsyncWithHttpInfo($id_import_file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductDataFileAsyncWithHttpInfo
     *
     * Get import file by ID
     *
     * @param  int $id_import_file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductDataFileAsyncWithHttpInfo($id_import_file)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataImportFileResponse_';
        $request = $this->getProductDataFileRequest($id_import_file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductDataFile'
     *
     * @param  int $id_import_file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProductDataFileRequest($id_import_file)
    {
        // verify the required parameter 'id_import_file' is set
        if ($id_import_file === null || (is_array($id_import_file) && count($id_import_file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_import_file when calling getProductDataFile'
            );
        }

        $resourcePath = '/product-data/import-files/{id_import_file}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_import_file !== null) {
            $resourcePath = str_replace(
                '{' . 'id_import_file' . '}',
                ObjectSerializer::toPathValue($id_import_file),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductDataFileList
     *
     * Get import files
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataImportFileStatus $status The status of your import (optional)
     * @param  \DateTime $ts_created Creation timestamp of the import file in ISO 8601 (optional)
     * @param  \DateTime $ts_updated Update timestamp of the import file in ISO 8601 (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataImportFileSorting $sort Select the field (time created or time updated) and the direction of sorting (ascending or descending) (optional)
     * @param  int $limit Desired size of result set. Max: 100 (optional)
     * @param  int $offset Offset applied to result set (optional)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseProductDataImportFileResponse_
     */
    public function getProductDataFileList($status = null, $ts_created = null, $ts_updated = null, $sort = null, $limit = null, $offset = null)
    {
        list($response) = $this->getProductDataFileListWithHttpInfo($status, $ts_created, $ts_updated, $sort, $limit, $offset);
        return $response;
    }

    /**
     * Operation getProductDataFileListWithHttpInfo
     *
     * Get import files
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataImportFileStatus $status The status of your import (optional)
     * @param  \DateTime $ts_created Creation timestamp of the import file in ISO 8601 (optional)
     * @param  \DateTime $ts_updated Update timestamp of the import file in ISO 8601 (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataImportFileSorting $sort Select the field (time created or time updated) and the direction of sorting (ascending or descending) (optional)
     * @param  int $limit Desired size of result set. Max: 100 (optional)
     * @param  int $offset Offset applied to result set (optional)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseProductDataImportFileResponse_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductDataFileListWithHttpInfo($status = null, $ts_created = null, $ts_updated = null, $sort = null, $limit = null, $offset = null)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseProductDataImportFileResponse_';
        $request = $this->getProductDataFileListRequest($status, $ts_created, $ts_updated, $sort, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseProductDataImportFileResponse_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductDataFileListAsync
     *
     * Get import files
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataImportFileStatus $status The status of your import (optional)
     * @param  \DateTime $ts_created Creation timestamp of the import file in ISO 8601 (optional)
     * @param  \DateTime $ts_updated Update timestamp of the import file in ISO 8601 (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataImportFileSorting $sort Select the field (time created or time updated) and the direction of sorting (ascending or descending) (optional)
     * @param  int $limit Desired size of result set. Max: 100 (optional)
     * @param  int $offset Offset applied to result set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductDataFileListAsync($status = null, $ts_created = null, $ts_updated = null, $sort = null, $limit = null, $offset = null)
    {
        return $this->getProductDataFileListAsyncWithHttpInfo($status, $ts_created, $ts_updated, $sort, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductDataFileListAsyncWithHttpInfo
     *
     * Get import files
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataImportFileStatus $status The status of your import (optional)
     * @param  \DateTime $ts_created Creation timestamp of the import file in ISO 8601 (optional)
     * @param  \DateTime $ts_updated Update timestamp of the import file in ISO 8601 (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataImportFileSorting $sort Select the field (time created or time updated) and the direction of sorting (ascending or descending) (optional)
     * @param  int $limit Desired size of result set. Max: 100 (optional)
     * @param  int $offset Offset applied to result set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductDataFileListAsyncWithHttpInfo($status = null, $ts_created = null, $ts_updated = null, $sort = null, $limit = null, $offset = null)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseProductDataImportFileResponse_';
        $request = $this->getProductDataFileListRequest($status, $ts_created, $ts_updated, $sort, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductDataFileList'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataImportFileStatus $status The status of your import (optional)
     * @param  \DateTime $ts_created Creation timestamp of the import file in ISO 8601 (optional)
     * @param  \DateTime $ts_updated Update timestamp of the import file in ISO 8601 (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataImportFileSorting $sort Select the field (time created or time updated) and the direction of sorting (ascending or descending) (optional)
     * @param  int $limit Desired size of result set. Max: 100 (optional)
     * @param  int $offset Offset applied to result set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProductDataFileListRequest($status = null, $ts_created = null, $ts_updated = null, $sort = null, $limit = null, $offset = null)
    {

        $resourcePath = '/product-data/import-files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status, null);
        }
        // query params
        if ($ts_created !== null) {
            $queryParams['ts_created'] = ObjectSerializer::toQueryValue($ts_created, 'date');
        }
        // query params
        if ($ts_updated !== null) {
            $queryParams['ts_updated'] = ObjectSerializer::toQueryValue($ts_updated, 'date-time');
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductDataStatus
     *
     * Get the process status for your product data
     *
     * @param  string $ean European Article Number with 13, 14 or 15 digits (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataStatusResponse_
     */
    public function getProductDataStatus($ean, $locale)
    {
        list($response) = $this->getProductDataStatusWithHttpInfo($ean, $locale);
        return $response;
    }

    /**
     * Operation getProductDataStatusWithHttpInfo
     *
     * Get the process status for your product data
     *
     * @param  string $ean European Article Number with 13, 14 or 15 digits (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataStatusResponse_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductDataStatusWithHttpInfo($ean, $locale)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataStatusResponse_';
        $request = $this->getProductDataStatusRequest($ean, $locale);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataStatusResponse_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\NotFoundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductDataStatusAsync
     *
     * Get the process status for your product data
     *
     * @param  string $ean European Article Number with 13, 14 or 15 digits (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductDataStatusAsync($ean, $locale)
    {
        return $this->getProductDataStatusAsyncWithHttpInfo($ean, $locale)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductDataStatusAsyncWithHttpInfo
     *
     * Get the process status for your product data
     *
     * @param  string $ean European Article Number with 13, 14 or 15 digits (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductDataStatusAsyncWithHttpInfo($ean, $locale)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseProductDataStatusResponse_';
        $request = $this->getProductDataStatusRequest($ean, $locale);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductDataStatus'
     *
     * @param  string $ean European Article Number with 13, 14 or 15 digits (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProductDataStatusRequest($ean, $locale)
    {
        // verify the required parameter 'ean' is set
        if ($ean === null || (is_array($ean) && count($ean) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ean when calling getProductDataStatus'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling getProductDataStatus'
            );
        }

        $resourcePath = '/product-data/status/{ean}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale, null);
        }

        // path params
        if ($ean !== null) {
            $resourcePath = str_replace(
                '{' . 'ean' . '}',
                ObjectSerializer::toPathValue($ean),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProductData
     *
     * Update existing product data for an EAN
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataObject $body JSON contains ean and attributes. Attributes contain all attributes with values
JSON can contain ean and attributes. Attributes contain all attributes with values (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponse
     */
    public function updateProductData($body, $locale)
    {
        list($response) = $this->updateProductDataWithHttpInfo($body, $locale);
        return $response;
    }

    /**
     * Operation updateProductDataWithHttpInfo
     *
     * Update existing product data for an EAN
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataObject $body JSON contains ean and attributes. Attributes contain all attributes with values
JSON can contain ean and attributes. Attributes contain all attributes with values (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProductDataWithHttpInfo($body, $locale)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponse';
        $request = $this->updateProductDataRequest($body, $locale);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProductDataAsync
     *
     * Update existing product data for an EAN
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataObject $body JSON contains ean and attributes. Attributes contain all attributes with values
JSON can contain ean and attributes. Attributes contain all attributes with values (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProductDataAsync($body, $locale)
    {
        return $this->updateProductDataAsyncWithHttpInfo($body, $locale)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateProductDataAsyncWithHttpInfo
     *
     * Update existing product data for an EAN
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataObject $body JSON contains ean and attributes. Attributes contain all attributes with values
JSON can contain ean and attributes. Attributes contain all attributes with values (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProductDataAsyncWithHttpInfo($body, $locale)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponse';
        $request = $this->updateProductDataRequest($body, $locale);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProductData'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataObject $body JSON contains ean and attributes. Attributes contain all attributes with values
JSON can contain ean and attributes. Attributes contain all attributes with values (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Locale $locale The language code of the product data (ISO 3166-2) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateProductDataRequest($body, $locale)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateProductData'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling updateProductData'
            );
        }

        $resourcePath = '/product-data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale, null);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
