<?php
/**
 * AttributesApi
 * PHP version 5
 *
 * @category Class
 * @package  Cbdesk\Kauflandv2\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * OpenAPI spec version: 2.9.1
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cbdesk\Kauflandv2\Api\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Cbdesk\Kauflandv2\Api\ApiException;
use Cbdesk\Kauflandv2\Api\Configuration;
use Cbdesk\Kauflandv2\Api\HeaderSelector;
use Cbdesk\Kauflandv2\Api\ObjectSerializer;

/**
 * AttributesApi Class Doc Comment
 *
 * @category Class
 * @package  Cbdesk\Kauflandv2\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AttributesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAttribute
     *
     * Get attribute by ID
     *
     * @param  int $id_attribute The ID of the attribute (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseAttribute_
     */
    public function getAttribute($id_attribute, $storefront, $locale = null)
    {
        list($response) = $this->getAttributeWithHttpInfo($id_attribute, $storefront, $locale);
        return $response;
    }

    /**
     * Operation getAttributeWithHttpInfo
     *
     * Get attribute by ID
     *
     * @param  int $id_attribute The ID of the attribute (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseAttribute_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAttributeWithHttpInfo($id_attribute, $storefront, $locale = null)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseAttribute_';
        $request = $this->getAttributeRequest($id_attribute, $storefront, $locale);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseAttribute_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\NotFoundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAttributeAsync
     *
     * Get attribute by ID
     *
     * @param  int $id_attribute The ID of the attribute (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttributeAsync($id_attribute, $storefront, $locale = null)
    {
        return $this->getAttributeAsyncWithHttpInfo($id_attribute, $storefront, $locale)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAttributeAsyncWithHttpInfo
     *
     * Get attribute by ID
     *
     * @param  int $id_attribute The ID of the attribute (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttributeAsyncWithHttpInfo($id_attribute, $storefront, $locale = null)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseAttribute_';
        $request = $this->getAttributeRequest($id_attribute, $storefront, $locale);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAttribute'
     *
     * @param  int $id_attribute The ID of the attribute (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAttributeRequest($id_attribute, $storefront, $locale = null)
    {
        // verify the required parameter 'id_attribute' is set
        if ($id_attribute === null || (is_array($id_attribute) && count($id_attribute) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_attribute when calling getAttribute'
            );
        }
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling getAttribute'
            );
        }

        $resourcePath = '/attributes/{id_attribute}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }
        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale, null);
        }

        // path params
        if ($id_attribute !== null) {
            $resourcePath = str_replace(
                '{' . 'id_attribute' . '}',
                ObjectSerializer::toPathValue($id_attribute),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAttributeByName
     *
     * Get attribute by name
     *
     * @param  string $name The name of the attribute (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseAttribute_
     */
    public function getAttributeByName($name, $storefront, $locale = null)
    {
        list($response) = $this->getAttributeByNameWithHttpInfo($name, $storefront, $locale);
        return $response;
    }

    /**
     * Operation getAttributeByNameWithHttpInfo
     *
     * Get attribute by name
     *
     * @param  string $name The name of the attribute (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseAttribute_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAttributeByNameWithHttpInfo($name, $storefront, $locale = null)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseAttribute_';
        $request = $this->getAttributeByNameRequest($name, $storefront, $locale);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseAttribute_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\NotFoundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAttributeByNameAsync
     *
     * Get attribute by name
     *
     * @param  string $name The name of the attribute (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttributeByNameAsync($name, $storefront, $locale = null)
    {
        return $this->getAttributeByNameAsyncWithHttpInfo($name, $storefront, $locale)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAttributeByNameAsyncWithHttpInfo
     *
     * Get attribute by name
     *
     * @param  string $name The name of the attribute (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttributeByNameAsyncWithHttpInfo($name, $storefront, $locale = null)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseAttribute_';
        $request = $this->getAttributeByNameRequest($name, $storefront, $locale);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAttributeByName'
     *
     * @param  string $name The name of the attribute (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAttributeByNameRequest($name, $storefront, $locale = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getAttributeByName'
            );
        }
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling getAttributeByName'
            );
        }

        $resourcePath = '/attributes/by-name/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }
        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale, null);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAttributeList
     *
     * Get an attribute list
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  int $limit Desired size of result set. Max: 100 (optional)
     * @param  int $offset Offset applied to result set (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseAttribute_
     */
    public function getAttributeList($storefront, $limit = null, $offset = null, $locale = null)
    {
        list($response) = $this->getAttributeListWithHttpInfo($storefront, $limit, $offset, $locale);
        return $response;
    }

    /**
     * Operation getAttributeListWithHttpInfo
     *
     * Get an attribute list
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  int $limit Desired size of result set. Max: 100 (optional)
     * @param  int $offset Offset applied to result set (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseAttribute_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAttributeListWithHttpInfo($storefront, $limit = null, $offset = null, $locale = null)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseAttribute_';
        $request = $this->getAttributeListRequest($storefront, $limit, $offset, $locale);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseAttribute_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAttributeListAsync
     *
     * Get an attribute list
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  int $limit Desired size of result set. Max: 100 (optional)
     * @param  int $offset Offset applied to result set (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttributeListAsync($storefront, $limit = null, $offset = null, $locale = null)
    {
        return $this->getAttributeListAsyncWithHttpInfo($storefront, $limit, $offset, $locale)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAttributeListAsyncWithHttpInfo
     *
     * Get an attribute list
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  int $limit Desired size of result set. Max: 100 (optional)
     * @param  int $offset Offset applied to result set (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttributeListAsyncWithHttpInfo($storefront, $limit = null, $offset = null, $locale = null)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseAttribute_';
        $request = $this->getAttributeListRequest($storefront, $limit, $offset, $locale);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAttributeList'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  int $limit Desired size of result set. Max: 100 (optional)
     * @param  int $offset Offset applied to result set (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAttributeListRequest($storefront, $limit = null, $offset = null, $locale = null)
    {
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling getAttributeList'
            );
        }

        $resourcePath = '/attributes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAttributeListBySearch
     *
     * Get attributes by search term
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  string $q Search term for finding a specific attribute (required)
     * @param  int $limit Desired size of result set. Max: 100 (optional)
     * @param  int $offset Offset applied to result set (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseAttribute_
     */
    public function getAttributeListBySearch($storefront, $q, $limit = null, $offset = null, $locale = null)
    {
        list($response) = $this->getAttributeListBySearchWithHttpInfo($storefront, $q, $limit, $offset, $locale);
        return $response;
    }

    /**
     * Operation getAttributeListBySearchWithHttpInfo
     *
     * Get attributes by search term
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  string $q Search term for finding a specific attribute (required)
     * @param  int $limit Desired size of result set. Max: 100 (optional)
     * @param  int $offset Offset applied to result set (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseAttribute_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAttributeListBySearchWithHttpInfo($storefront, $q, $limit = null, $offset = null, $locale = null)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseAttribute_';
        $request = $this->getAttributeListBySearchRequest($storefront, $q, $limit, $offset, $locale);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseAttribute_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAttributeListBySearchAsync
     *
     * Get attributes by search term
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  string $q Search term for finding a specific attribute (required)
     * @param  int $limit Desired size of result set. Max: 100 (optional)
     * @param  int $offset Offset applied to result set (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttributeListBySearchAsync($storefront, $q, $limit = null, $offset = null, $locale = null)
    {
        return $this->getAttributeListBySearchAsyncWithHttpInfo($storefront, $q, $limit, $offset, $locale)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAttributeListBySearchAsyncWithHttpInfo
     *
     * Get attributes by search term
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  string $q Search term for finding a specific attribute (required)
     * @param  int $limit Desired size of result set. Max: 100 (optional)
     * @param  int $offset Offset applied to result set (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttributeListBySearchAsyncWithHttpInfo($storefront, $q, $limit = null, $offset = null, $locale = null)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseAttribute_';
        $request = $this->getAttributeListBySearchRequest($storefront, $q, $limit, $offset, $locale);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAttributeListBySearch'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Specifies the store by country (required)
     * @param  string $q Search term for finding a specific attribute (required)
     * @param  int $limit Desired size of result set. Max: 100 (optional)
     * @param  int $offset Offset applied to result set (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ProductDataLocale $locale Allows clients to consume the data in languages that are different from the storefront-default locale (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAttributeListBySearchRequest($storefront, $q, $limit = null, $offset = null, $locale = null)
    {
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling getAttributeListBySearch'
            );
        }
        // verify the required parameter 'q' is set
        if ($q === null || (is_array($q) && count($q) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $q when calling getAttributeListBySearch'
            );
        }

        $resourcePath = '/attributes/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
