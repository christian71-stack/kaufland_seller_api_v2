<?php
/**
 * TicketsApi
 * PHP version 5
 *
 * @category Class
 * @package  Cbdesk\Kauflandv2\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * OpenAPI spec version: 2.9.1
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cbdesk\Kauflandv2\Api\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Cbdesk\Kauflandv2\Api\ApiException;
use Cbdesk\Kauflandv2\Api\Configuration;
use Cbdesk\Kauflandv2\Api\HeaderSelector;
use Cbdesk\Kauflandv2\Api\ObjectSerializer;

/**
 * TicketsApi Class Doc Comment
 *
 * @category Class
 * @package  Cbdesk\Kauflandv2\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TicketsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation closeTicket
     *
     * Close a ticket by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketID $id_ticket The unique ID of a ticket (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function closeTicket($id_ticket)
    {
        $this->closeTicketWithHttpInfo($id_ticket);
    }

    /**
     * Operation closeTicketWithHttpInfo
     *
     * Close a ticket by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketID $id_ticket The unique ID of a ticket (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function closeTicketWithHttpInfo($id_ticket)
    {
        $returnType = '';
        $request = $this->closeTicketRequest($id_ticket);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation closeTicketAsync
     *
     * Close a ticket by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketID $id_ticket The unique ID of a ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function closeTicketAsync($id_ticket)
    {
        return $this->closeTicketAsyncWithHttpInfo($id_ticket)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation closeTicketAsyncWithHttpInfo
     *
     * Close a ticket by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketID $id_ticket The unique ID of a ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function closeTicketAsyncWithHttpInfo($id_ticket)
    {
        $returnType = '';
        $request = $this->closeTicketRequest($id_ticket);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'closeTicket'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketID $id_ticket The unique ID of a ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function closeTicketRequest($id_ticket)
    {
        // verify the required parameter 'id_ticket' is set
        if ($id_ticket === null || (is_array($id_ticket) && count($id_ticket) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_ticket when calling closeTicket'
            );
        }

        $resourcePath = '/tickets/{id_ticket}/close';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_ticket !== null) {
            $resourcePath = str_replace(
                '{' . 'id_ticket' . '}',
                ObjectSerializer::toPathValue($id_ticket),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTicketMessage
     *
     * Create a new message for the ticket
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\CreateTicketMessageRequest $body Body params for the new message. (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketID $id_ticket The unique ID of a ticket (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createTicketMessage($body, $id_ticket)
    {
        $this->createTicketMessageWithHttpInfo($body, $id_ticket);
    }

    /**
     * Operation createTicketMessageWithHttpInfo
     *
     * Create a new message for the ticket
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\CreateTicketMessageRequest $body Body params for the new message. (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketID $id_ticket The unique ID of a ticket (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTicketMessageWithHttpInfo($body, $id_ticket)
    {
        $returnType = '';
        $request = $this->createTicketMessageRequest($body, $id_ticket);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTicketMessageAsync
     *
     * Create a new message for the ticket
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\CreateTicketMessageRequest $body Body params for the new message. (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketID $id_ticket The unique ID of a ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTicketMessageAsync($body, $id_ticket)
    {
        return $this->createTicketMessageAsyncWithHttpInfo($body, $id_ticket)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTicketMessageAsyncWithHttpInfo
     *
     * Create a new message for the ticket
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\CreateTicketMessageRequest $body Body params for the new message. (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketID $id_ticket The unique ID of a ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTicketMessageAsyncWithHttpInfo($body, $id_ticket)
    {
        $returnType = '';
        $request = $this->createTicketMessageRequest($body, $id_ticket);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTicketMessage'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\CreateTicketMessageRequest $body Body params for the new message. (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketID $id_ticket The unique ID of a ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTicketMessageRequest($body, $id_ticket)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTicketMessage'
            );
        }
        // verify the required parameter 'id_ticket' is set
        if ($id_ticket === null || (is_array($id_ticket) && count($id_ticket) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_ticket when calling createTicketMessage'
            );
        }

        $resourcePath = '/tickets/{id_ticket}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_ticket !== null) {
            $resourcePath = str_replace(
                '{' . 'id_ticket' . '}',
                ObjectSerializer::toPathValue($id_ticket),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTicket
     *
     * Get a ticket by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketID $id_ticket The unique ID of a ticket (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketEmbeddable[] $embedded A string of comma-separated values. Possible values: buyer, product, messages, order_units, files (optional)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseTicketWithEmbedded_
     */
    public function getTicket($id_ticket, $embedded = null)
    {
        list($response) = $this->getTicketWithHttpInfo($id_ticket, $embedded);
        return $response;
    }

    /**
     * Operation getTicketWithHttpInfo
     *
     * Get a ticket by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketID $id_ticket The unique ID of a ticket (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketEmbeddable[] $embedded A string of comma-separated values. Possible values: buyer, product, messages, order_units, files (optional)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseTicketWithEmbedded_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTicketWithHttpInfo($id_ticket, $embedded = null)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseTicketWithEmbedded_';
        $request = $this->getTicketRequest($id_ticket, $embedded);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseTicketWithEmbedded_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTicketAsync
     *
     * Get a ticket by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketID $id_ticket The unique ID of a ticket (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketEmbeddable[] $embedded A string of comma-separated values. Possible values: buyer, product, messages, order_units, files (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTicketAsync($id_ticket, $embedded = null)
    {
        return $this->getTicketAsyncWithHttpInfo($id_ticket, $embedded)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTicketAsyncWithHttpInfo
     *
     * Get a ticket by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketID $id_ticket The unique ID of a ticket (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketEmbeddable[] $embedded A string of comma-separated values. Possible values: buyer, product, messages, order_units, files (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTicketAsyncWithHttpInfo($id_ticket, $embedded = null)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseTicketWithEmbedded_';
        $request = $this->getTicketRequest($id_ticket, $embedded);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTicket'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketID $id_ticket The unique ID of a ticket (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketEmbeddable[] $embedded A string of comma-separated values. Possible values: buyer, product, messages, order_units, files (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTicketRequest($id_ticket, $embedded = null)
    {
        // verify the required parameter 'id_ticket' is set
        if ($id_ticket === null || (is_array($id_ticket) && count($id_ticket) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_ticket when calling getTicket'
            );
        }

        $resourcePath = '/tickets/{id_ticket}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($embedded)) {
            $embedded = ObjectSerializer::serializeCollection($embedded, 'multi', true);
        }
        if ($embedded !== null) {
            $queryParams['embedded'] = ObjectSerializer::toQueryValue($embedded, null);
        }

        // path params
        if ($id_ticket !== null) {
            $resourcePath = str_replace(
                '{' . 'id_ticket' . '}',
                ObjectSerializer::toPathValue($id_ticket),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTicketMessages
     *
     * Get a list of ticket messages
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketMessageListLimit $limit Desired size of result set (default: 30) (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketMessagesSort $sort The sort direction (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketMessageListOffset $offset Offset applied to result set (default: 0) (optional)
     * @param  \DateTime $ts_created_from_iso Filter ticket messages by their creation timestamp in iso 8601 (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\FulfillmentType[] $fulfillment_type Filter tickets by their fulfillment type (optional, default to ["fulfilled_by_merchant"])
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseTicketMessage_
     */
    public function getTicketMessages($limit = null, $sort = null, $offset = null, $ts_created_from_iso = null, $fulfillment_type = '["fulfilled_by_merchant"]')
    {
        list($response) = $this->getTicketMessagesWithHttpInfo($limit, $sort, $offset, $ts_created_from_iso, $fulfillment_type);
        return $response;
    }

    /**
     * Operation getTicketMessagesWithHttpInfo
     *
     * Get a list of ticket messages
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketMessageListLimit $limit Desired size of result set (default: 30) (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketMessagesSort $sort The sort direction (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketMessageListOffset $offset Offset applied to result set (default: 0) (optional)
     * @param  \DateTime $ts_created_from_iso Filter ticket messages by their creation timestamp in iso 8601 (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\FulfillmentType[] $fulfillment_type Filter tickets by their fulfillment type (optional, default to ["fulfilled_by_merchant"])
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseTicketMessage_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTicketMessagesWithHttpInfo($limit = null, $sort = null, $offset = null, $ts_created_from_iso = null, $fulfillment_type = '["fulfilled_by_merchant"]')
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseTicketMessage_';
        $request = $this->getTicketMessagesRequest($limit, $sort, $offset, $ts_created_from_iso, $fulfillment_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseTicketMessage_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTicketMessagesAsync
     *
     * Get a list of ticket messages
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketMessageListLimit $limit Desired size of result set (default: 30) (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketMessagesSort $sort The sort direction (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketMessageListOffset $offset Offset applied to result set (default: 0) (optional)
     * @param  \DateTime $ts_created_from_iso Filter ticket messages by their creation timestamp in iso 8601 (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\FulfillmentType[] $fulfillment_type Filter tickets by their fulfillment type (optional, default to ["fulfilled_by_merchant"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTicketMessagesAsync($limit = null, $sort = null, $offset = null, $ts_created_from_iso = null, $fulfillment_type = '["fulfilled_by_merchant"]')
    {
        return $this->getTicketMessagesAsyncWithHttpInfo($limit, $sort, $offset, $ts_created_from_iso, $fulfillment_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTicketMessagesAsyncWithHttpInfo
     *
     * Get a list of ticket messages
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketMessageListLimit $limit Desired size of result set (default: 30) (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketMessagesSort $sort The sort direction (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketMessageListOffset $offset Offset applied to result set (default: 0) (optional)
     * @param  \DateTime $ts_created_from_iso Filter ticket messages by their creation timestamp in iso 8601 (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\FulfillmentType[] $fulfillment_type Filter tickets by their fulfillment type (optional, default to ["fulfilled_by_merchant"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTicketMessagesAsyncWithHttpInfo($limit = null, $sort = null, $offset = null, $ts_created_from_iso = null, $fulfillment_type = '["fulfilled_by_merchant"]')
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseTicketMessage_';
        $request = $this->getTicketMessagesRequest($limit, $sort, $offset, $ts_created_from_iso, $fulfillment_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTicketMessages'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketMessageListLimit $limit Desired size of result set (default: 30) (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketMessagesSort $sort The sort direction (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketMessageListOffset $offset Offset applied to result set (default: 0) (optional)
     * @param  \DateTime $ts_created_from_iso Filter ticket messages by their creation timestamp in iso 8601 (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\FulfillmentType[] $fulfillment_type Filter tickets by their fulfillment type (optional, default to ["fulfilled_by_merchant"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTicketMessagesRequest($limit = null, $sort = null, $offset = null, $ts_created_from_iso = null, $fulfillment_type = '["fulfilled_by_merchant"]')
    {

        $resourcePath = '/tickets/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        }
        // query params
        if ($ts_created_from_iso !== null) {
            $queryParams['ts_created_from_iso'] = ObjectSerializer::toQueryValue($ts_created_from_iso, 'date-time');
        }
        // query params
        if (is_array($fulfillment_type)) {
            $fulfillment_type = ObjectSerializer::serializeCollection($fulfillment_type, 'multi', true);
        }
        if ($fulfillment_type !== null) {
            $queryParams['fulfillment_type'] = ObjectSerializer::toQueryValue($fulfillment_type, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTickets
     *
     * Get a list of tickets
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketsSort $sort The sort direction (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketListLimit $limit Desired size of result set (default: 30) (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketStatus[] $status The status of the ticket (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketReason[] $open_reason The reason for this ticket. (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketTopic[] $topic The topic of this ticket. (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Integer $id_buyer The buyer&#x27;s internal id (optional)
     * @param  \DateTime $ts_created_from_iso Filter tickets by their creation timestamp in ISO 8601 (optional)
     * @param  \DateTime $ts_updated_from_iso Filter tickets by their update timestamp in ISO 8601 (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketListOffset $offset Offset applied to the result set (default: 0) (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront[] $storefront Identifier for the storefront the tickets should belong to (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\FulfillmentType[] $fulfillment_type Filter tickets by their fulfillment type (optional, default to ["fulfilled_by_merchant"])
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseTicket_
     */
    public function getTickets($sort = null, $limit = null, $status = null, $open_reason = null, $topic = null, $id_buyer = null, $ts_created_from_iso = null, $ts_updated_from_iso = null, $offset = null, $storefront = null, $fulfillment_type = '["fulfilled_by_merchant"]')
    {
        list($response) = $this->getTicketsWithHttpInfo($sort, $limit, $status, $open_reason, $topic, $id_buyer, $ts_created_from_iso, $ts_updated_from_iso, $offset, $storefront, $fulfillment_type);
        return $response;
    }

    /**
     * Operation getTicketsWithHttpInfo
     *
     * Get a list of tickets
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketsSort $sort The sort direction (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketListLimit $limit Desired size of result set (default: 30) (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketStatus[] $status The status of the ticket (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketReason[] $open_reason The reason for this ticket. (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketTopic[] $topic The topic of this ticket. (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Integer $id_buyer The buyer&#x27;s internal id (optional)
     * @param  \DateTime $ts_created_from_iso Filter tickets by their creation timestamp in ISO 8601 (optional)
     * @param  \DateTime $ts_updated_from_iso Filter tickets by their update timestamp in ISO 8601 (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketListOffset $offset Offset applied to the result set (default: 0) (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront[] $storefront Identifier for the storefront the tickets should belong to (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\FulfillmentType[] $fulfillment_type Filter tickets by their fulfillment type (optional, default to ["fulfilled_by_merchant"])
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseTicket_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTicketsWithHttpInfo($sort = null, $limit = null, $status = null, $open_reason = null, $topic = null, $id_buyer = null, $ts_created_from_iso = null, $ts_updated_from_iso = null, $offset = null, $storefront = null, $fulfillment_type = '["fulfilled_by_merchant"]')
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseTicket_';
        $request = $this->getTicketsRequest($sort, $limit, $status, $open_reason, $topic, $id_buyer, $ts_created_from_iso, $ts_updated_from_iso, $offset, $storefront, $fulfillment_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseTicket_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTicketsAsync
     *
     * Get a list of tickets
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketsSort $sort The sort direction (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketListLimit $limit Desired size of result set (default: 30) (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketStatus[] $status The status of the ticket (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketReason[] $open_reason The reason for this ticket. (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketTopic[] $topic The topic of this ticket. (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Integer $id_buyer The buyer&#x27;s internal id (optional)
     * @param  \DateTime $ts_created_from_iso Filter tickets by their creation timestamp in ISO 8601 (optional)
     * @param  \DateTime $ts_updated_from_iso Filter tickets by their update timestamp in ISO 8601 (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketListOffset $offset Offset applied to the result set (default: 0) (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront[] $storefront Identifier for the storefront the tickets should belong to (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\FulfillmentType[] $fulfillment_type Filter tickets by their fulfillment type (optional, default to ["fulfilled_by_merchant"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTicketsAsync($sort = null, $limit = null, $status = null, $open_reason = null, $topic = null, $id_buyer = null, $ts_created_from_iso = null, $ts_updated_from_iso = null, $offset = null, $storefront = null, $fulfillment_type = '["fulfilled_by_merchant"]')
    {
        return $this->getTicketsAsyncWithHttpInfo($sort, $limit, $status, $open_reason, $topic, $id_buyer, $ts_created_from_iso, $ts_updated_from_iso, $offset, $storefront, $fulfillment_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTicketsAsyncWithHttpInfo
     *
     * Get a list of tickets
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketsSort $sort The sort direction (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketListLimit $limit Desired size of result set (default: 30) (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketStatus[] $status The status of the ticket (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketReason[] $open_reason The reason for this ticket. (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketTopic[] $topic The topic of this ticket. (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Integer $id_buyer The buyer&#x27;s internal id (optional)
     * @param  \DateTime $ts_created_from_iso Filter tickets by their creation timestamp in ISO 8601 (optional)
     * @param  \DateTime $ts_updated_from_iso Filter tickets by their update timestamp in ISO 8601 (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketListOffset $offset Offset applied to the result set (default: 0) (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront[] $storefront Identifier for the storefront the tickets should belong to (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\FulfillmentType[] $fulfillment_type Filter tickets by their fulfillment type (optional, default to ["fulfilled_by_merchant"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTicketsAsyncWithHttpInfo($sort = null, $limit = null, $status = null, $open_reason = null, $topic = null, $id_buyer = null, $ts_created_from_iso = null, $ts_updated_from_iso = null, $offset = null, $storefront = null, $fulfillment_type = '["fulfilled_by_merchant"]')
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseTicket_';
        $request = $this->getTicketsRequest($sort, $limit, $status, $open_reason, $topic, $id_buyer, $ts_created_from_iso, $ts_updated_from_iso, $offset, $storefront, $fulfillment_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTickets'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketsSort $sort The sort direction (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketListLimit $limit Desired size of result set (default: 30) (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketStatus[] $status The status of the ticket (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketReason[] $open_reason The reason for this ticket. (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketTopic[] $topic The topic of this ticket. (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Integer $id_buyer The buyer&#x27;s internal id (optional)
     * @param  \DateTime $ts_created_from_iso Filter tickets by their creation timestamp in ISO 8601 (optional)
     * @param  \DateTime $ts_updated_from_iso Filter tickets by their update timestamp in ISO 8601 (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\TicketListOffset $offset Offset applied to the result set (default: 0) (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront[] $storefront Identifier for the storefront the tickets should belong to (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\FulfillmentType[] $fulfillment_type Filter tickets by their fulfillment type (optional, default to ["fulfilled_by_merchant"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTicketsRequest($sort = null, $limit = null, $status = null, $open_reason = null, $topic = null, $id_buyer = null, $ts_created_from_iso = null, $ts_updated_from_iso = null, $offset = null, $storefront = null, $fulfillment_type = '["fulfilled_by_merchant"]')
    {

        $resourcePath = '/tickets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, 'multi', true);
        }
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status, null);
        }
        // query params
        if (is_array($open_reason)) {
            $open_reason = ObjectSerializer::serializeCollection($open_reason, 'multi', true);
        }
        if ($open_reason !== null) {
            $queryParams['open_reason'] = ObjectSerializer::toQueryValue($open_reason, null);
        }
        // query params
        if (is_array($topic)) {
            $topic = ObjectSerializer::serializeCollection($topic, 'multi', true);
        }
        if ($topic !== null) {
            $queryParams['topic'] = ObjectSerializer::toQueryValue($topic, null);
        }
        // query params
        if ($id_buyer !== null) {
            $queryParams['id_buyer'] = ObjectSerializer::toQueryValue($id_buyer, null);
        }
        // query params
        if ($ts_created_from_iso !== null) {
            $queryParams['ts_created_from_iso'] = ObjectSerializer::toQueryValue($ts_created_from_iso, 'date-time');
        }
        // query params
        if ($ts_updated_from_iso !== null) {
            $queryParams['ts_updated_from_iso'] = ObjectSerializer::toQueryValue($ts_updated_from_iso, 'date-time');
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        }
        // query params
        if (is_array($storefront)) {
            $storefront = ObjectSerializer::serializeCollection($storefront, 'multi', true);
        }
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }
        // query params
        if (is_array($fulfillment_type)) {
            $fulfillment_type = ObjectSerializer::serializeCollection($fulfillment_type, 'multi', true);
        }
        if ($fulfillment_type !== null) {
            $queryParams['fulfillment_type'] = ObjectSerializer::toQueryValue($fulfillment_type, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation openTicket
     *
     * Open a ticket
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\OpenTicketRequest $body body (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseOpenTicketResponse_
     */
    public function openTicket($body)
    {
        list($response) = $this->openTicketWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation openTicketWithHttpInfo
     *
     * Open a ticket
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\OpenTicketRequest $body (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseOpenTicketResponse_, HTTP status code, HTTP response headers (array of strings)
     */
    public function openTicketWithHttpInfo($body)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseOpenTicketResponse_';
        $request = $this->openTicketRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseOpenTicketResponse_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation openTicketAsync
     *
     * Open a ticket
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\OpenTicketRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function openTicketAsync($body)
    {
        return $this->openTicketAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation openTicketAsyncWithHttpInfo
     *
     * Open a ticket
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\OpenTicketRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function openTicketAsyncWithHttpInfo($body)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseOpenTicketResponse_';
        $request = $this->openTicketRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'openTicket'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\OpenTicketRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function openTicketRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling openTicket'
            );
        }

        $resourcePath = '/tickets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
