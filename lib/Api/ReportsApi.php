<?php
/**
 * ReportsApi
 * PHP version 5
 *
 * @category Class
 * @package  Cbdesk\Kauflandv2\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * OpenAPI spec version: 2.9.1
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cbdesk\Kauflandv2\Api\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Cbdesk\Kauflandv2\Api\ApiException;
use Cbdesk\Kauflandv2\Api\Configuration;
use Cbdesk\Kauflandv2\Api\HeaderSelector;
use Cbdesk\Kauflandv2\Api\ObjectSerializer;

/**
 * ReportsApi Class Doc Comment
 *
 * @category Class
 * @package  Cbdesk\Kauflandv2\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getReport
     *
     * Get meta-data for a single report by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\LongInteger $id_report id_report (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseReport_
     */
    public function getReport($id_report)
    {
        list($response) = $this->getReportWithHttpInfo($id_report);
        return $response;
    }

    /**
     * Operation getReportWithHttpInfo
     *
     * Get meta-data for a single report by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\LongInteger $id_report (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseReport_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReportWithHttpInfo($id_report)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseReport_';
        $request = $this->getReportRequest($id_report);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseReport_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReportAsync
     *
     * Get meta-data for a single report by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\LongInteger $id_report (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportAsync($id_report)
    {
        return $this->getReportAsyncWithHttpInfo($id_report)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReportAsyncWithHttpInfo
     *
     * Get meta-data for a single report by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\LongInteger $id_report (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportAsyncWithHttpInfo($id_report)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseReport_';
        $request = $this->getReportRequest($id_report);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReport'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\LongInteger $id_report (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getReportRequest($id_report)
    {
        // verify the required parameter 'id_report' is set
        if ($id_report === null || (is_array($id_report) && count($id_report) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_report when calling getReport'
            );
        }

        $resourcePath = '/reports/{id_report}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_report !== null) {
            $resourcePath = str_replace(
                '{' . 'id_report' . '}',
                ObjectSerializer::toPathValue($id_report),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReports
     *
     * Get a list of your reports
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ReportsSorting $sort Sorting of result set (optional)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseReport_
     */
    public function getReports($storefront = null, $limit = '30', $offset = '0', $sort = null)
    {
        list($response) = $this->getReportsWithHttpInfo($storefront, $limit, $offset, $sort);
        return $response;
    }

    /**
     * Operation getReportsWithHttpInfo
     *
     * Get a list of your reports
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ReportsSorting $sort Sorting of result set (optional)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseReport_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReportsWithHttpInfo($storefront = null, $limit = '30', $offset = '0', $sort = null)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseReport_';
        $request = $this->getReportsRequest($storefront, $limit, $offset, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseReport_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReportsAsync
     *
     * Get a list of your reports
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ReportsSorting $sort Sorting of result set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportsAsync($storefront = null, $limit = '30', $offset = '0', $sort = null)
    {
        return $this->getReportsAsyncWithHttpInfo($storefront, $limit, $offset, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReportsAsyncWithHttpInfo
     *
     * Get a list of your reports
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ReportsSorting $sort Sorting of result set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportsAsyncWithHttpInfo($storefront = null, $limit = '30', $offset = '0', $sort = null)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseReport_';
        $request = $this->getReportsRequest($storefront, $limit, $offset, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReports'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ReportsSorting $sort Sorting of result set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getReportsRequest($storefront = null, $limit = '30', $offset = '0', $sort = null)
    {

        $resourcePath = '/reports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestAccountListingReport
     *
     * Queue an inventory report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_
     */
    public function requestAccountListingReport($storefront)
    {
        list($response) = $this->requestAccountListingReportWithHttpInfo($storefront);
        return $response;
    }

    /**
     * Operation requestAccountListingReportWithHttpInfo
     *
     * Queue an inventory report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestAccountListingReportWithHttpInfo($storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_';
        $request = $this->requestAccountListingReportRequest($storefront);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation requestAccountListingReportAsync
     *
     * Queue an inventory report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestAccountListingReportAsync($storefront)
    {
        return $this->requestAccountListingReportAsyncWithHttpInfo($storefront)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestAccountListingReportAsyncWithHttpInfo
     *
     * Queue an inventory report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestAccountListingReportAsyncWithHttpInfo($storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_';
        $request = $this->requestAccountListingReportRequest($storefront);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestAccountListingReport'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function requestAccountListingReportRequest($storefront)
    {
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling requestAccountListingReport'
            );
        }

        $resourcePath = '/reports/account-listing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestAccountListingWithShopPriceReport
     *
     * Queue an inventory report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_
     */
    public function requestAccountListingWithShopPriceReport($storefront)
    {
        list($response) = $this->requestAccountListingWithShopPriceReportWithHttpInfo($storefront);
        return $response;
    }

    /**
     * Operation requestAccountListingWithShopPriceReportWithHttpInfo
     *
     * Queue an inventory report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestAccountListingWithShopPriceReportWithHttpInfo($storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_';
        $request = $this->requestAccountListingWithShopPriceReportRequest($storefront);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation requestAccountListingWithShopPriceReportAsync
     *
     * Queue an inventory report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestAccountListingWithShopPriceReportAsync($storefront)
    {
        return $this->requestAccountListingWithShopPriceReportAsyncWithHttpInfo($storefront)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestAccountListingWithShopPriceReportAsyncWithHttpInfo
     *
     * Queue an inventory report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestAccountListingWithShopPriceReportAsyncWithHttpInfo($storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_';
        $request = $this->requestAccountListingWithShopPriceReportRequest($storefront);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestAccountListingWithShopPriceReport'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function requestAccountListingWithShopPriceReportRequest($storefront)
    {
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling requestAccountListingWithShopPriceReport'
            );
        }

        $resourcePath = '/reports/account-listing-with-shop-price';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestCancellationsReport
     *
     * Queue a cancellations report.
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_
     */
    public function requestCancellationsReport($storefront)
    {
        list($response) = $this->requestCancellationsReportWithHttpInfo($storefront);
        return $response;
    }

    /**
     * Operation requestCancellationsReportWithHttpInfo
     *
     * Queue a cancellations report.
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestCancellationsReportWithHttpInfo($storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_';
        $request = $this->requestCancellationsReportRequest($storefront);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation requestCancellationsReportAsync
     *
     * Queue a cancellations report.
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestCancellationsReportAsync($storefront)
    {
        return $this->requestCancellationsReportAsyncWithHttpInfo($storefront)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestCancellationsReportAsyncWithHttpInfo
     *
     * Queue a cancellations report.
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestCancellationsReportAsyncWithHttpInfo($storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_';
        $request = $this->requestCancellationsReportRequest($storefront);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestCancellationsReport'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function requestCancellationsReportRequest($storefront)
    {
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling requestCancellationsReport'
            );
        }

        $resourcePath = '/reports/cancellations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestCompetitorsComparerReport
     *
     * Queue a competitors comparison report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_
     */
    public function requestCompetitorsComparerReport($storefront)
    {
        list($response) = $this->requestCompetitorsComparerReportWithHttpInfo($storefront);
        return $response;
    }

    /**
     * Operation requestCompetitorsComparerReportWithHttpInfo
     *
     * Queue a competitors comparison report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestCompetitorsComparerReportWithHttpInfo($storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_';
        $request = $this->requestCompetitorsComparerReportRequest($storefront);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation requestCompetitorsComparerReportAsync
     *
     * Queue a competitors comparison report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestCompetitorsComparerReportAsync($storefront)
    {
        return $this->requestCompetitorsComparerReportAsyncWithHttpInfo($storefront)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestCompetitorsComparerReportAsyncWithHttpInfo
     *
     * Queue a competitors comparison report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestCompetitorsComparerReportAsyncWithHttpInfo($storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_';
        $request = $this->requestCompetitorsComparerReportRequest($storefront);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestCompetitorsComparerReport'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function requestCompetitorsComparerReportRequest($storefront)
    {
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling requestCompetitorsComparerReport'
            );
        }

        $resourcePath = '/reports/competitors-comparer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestEansNotFoundReport
     *
     * Queue an EANs not found report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_
     */
    public function requestEansNotFoundReport($storefront)
    {
        list($response) = $this->requestEansNotFoundReportWithHttpInfo($storefront);
        return $response;
    }

    /**
     * Operation requestEansNotFoundReportWithHttpInfo
     *
     * Queue an EANs not found report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestEansNotFoundReportWithHttpInfo($storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_';
        $request = $this->requestEansNotFoundReportRequest($storefront);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation requestEansNotFoundReportAsync
     *
     * Queue an EANs not found report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestEansNotFoundReportAsync($storefront)
    {
        return $this->requestEansNotFoundReportAsyncWithHttpInfo($storefront)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestEansNotFoundReportAsyncWithHttpInfo
     *
     * Queue an EANs not found report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestEansNotFoundReportAsyncWithHttpInfo($storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_';
        $request = $this->requestEansNotFoundReportRequest($storefront);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestEansNotFoundReport'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function requestEansNotFoundReportRequest($storefront)
    {
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling requestEansNotFoundReport'
            );
        }

        $resourcePath = '/reports/eans-not-found';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestNewBookingsReport
     *
     * Queue a bookings report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\RequestBookingsReportRequest $body body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_
     */
    public function requestNewBookingsReport($body, $storefront)
    {
        list($response) = $this->requestNewBookingsReportWithHttpInfo($body, $storefront);
        return $response;
    }

    /**
     * Operation requestNewBookingsReportWithHttpInfo
     *
     * Queue a bookings report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\RequestBookingsReportRequest $body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestNewBookingsReportWithHttpInfo($body, $storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_';
        $request = $this->requestNewBookingsReportRequest($body, $storefront);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation requestNewBookingsReportAsync
     *
     * Queue a bookings report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\RequestBookingsReportRequest $body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestNewBookingsReportAsync($body, $storefront)
    {
        return $this->requestNewBookingsReportAsyncWithHttpInfo($body, $storefront)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestNewBookingsReportAsyncWithHttpInfo
     *
     * Queue a bookings report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\RequestBookingsReportRequest $body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestNewBookingsReportAsyncWithHttpInfo($body, $storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_';
        $request = $this->requestNewBookingsReportRequest($body, $storefront);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestNewBookingsReport'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\RequestBookingsReportRequest $body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function requestNewBookingsReportRequest($body, $storefront)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling requestNewBookingsReport'
            );
        }
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling requestNewBookingsReport'
            );
        }

        $resourcePath = '/reports/bookings-new';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestNewSalesReport
     *
     * Queue a sales report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\RequestNewSalesReportRequest $body body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_
     */
    public function requestNewSalesReport($body, $storefront)
    {
        list($response) = $this->requestNewSalesReportWithHttpInfo($body, $storefront);
        return $response;
    }

    /**
     * Operation requestNewSalesReportWithHttpInfo
     *
     * Queue a sales report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\RequestNewSalesReportRequest $body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestNewSalesReportWithHttpInfo($body, $storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_';
        $request = $this->requestNewSalesReportRequest($body, $storefront);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation requestNewSalesReportAsync
     *
     * Queue a sales report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\RequestNewSalesReportRequest $body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestNewSalesReportAsync($body, $storefront)
    {
        return $this->requestNewSalesReportAsyncWithHttpInfo($body, $storefront)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestNewSalesReportAsyncWithHttpInfo
     *
     * Queue a sales report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\RequestNewSalesReportRequest $body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestNewSalesReportAsyncWithHttpInfo($body, $storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_';
        $request = $this->requestNewSalesReportRequest($body, $storefront);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestNewSalesReport'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\RequestNewSalesReportRequest $body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function requestNewSalesReportRequest($body, $storefront)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling requestNewSalesReport'
            );
        }
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling requestNewSalesReport'
            );
        }

        $resourcePath = '/reports/sales-new';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestProductDataChangesReport
     *
     * Queue a product data changes report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_
     */
    public function requestProductDataChangesReport($storefront)
    {
        list($response) = $this->requestProductDataChangesReportWithHttpInfo($storefront);
        return $response;
    }

    /**
     * Operation requestProductDataChangesReportWithHttpInfo
     *
     * Queue a product data changes report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestProductDataChangesReportWithHttpInfo($storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_';
        $request = $this->requestProductDataChangesReportRequest($storefront);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation requestProductDataChangesReportAsync
     *
     * Queue a product data changes report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestProductDataChangesReportAsync($storefront)
    {
        return $this->requestProductDataChangesReportAsyncWithHttpInfo($storefront)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestProductDataChangesReportAsyncWithHttpInfo
     *
     * Queue a product data changes report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestProductDataChangesReportAsyncWithHttpInfo($storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_';
        $request = $this->requestProductDataChangesReportRequest($storefront);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestProductDataChangesReport'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function requestProductDataChangesReportRequest($storefront)
    {
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling requestProductDataChangesReport'
            );
        }

        $resourcePath = '/reports/product-data-changes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestProductDataImportFileErrorsReport
     *
     * Queue a product data import file errors report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\RequestProductDataImportFileErrorsReportRequest $body body (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_
     */
    public function requestProductDataImportFileErrorsReport($body)
    {
        list($response) = $this->requestProductDataImportFileErrorsReportWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation requestProductDataImportFileErrorsReportWithHttpInfo
     *
     * Queue a product data import file errors report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\RequestProductDataImportFileErrorsReportRequest $body (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestProductDataImportFileErrorsReportWithHttpInfo($body)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_';
        $request = $this->requestProductDataImportFileErrorsReportRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation requestProductDataImportFileErrorsReportAsync
     *
     * Queue a product data import file errors report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\RequestProductDataImportFileErrorsReportRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestProductDataImportFileErrorsReportAsync($body)
    {
        return $this->requestProductDataImportFileErrorsReportAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestProductDataImportFileErrorsReportAsyncWithHttpInfo
     *
     * Queue a product data import file errors report
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\RequestProductDataImportFileErrorsReportRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestProductDataImportFileErrorsReportAsyncWithHttpInfo($body)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseRequestedReport_';
        $request = $this->requestProductDataImportFileErrorsReportRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestProductDataImportFileErrorsReport'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\RequestProductDataImportFileErrorsReportRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function requestProductDataImportFileErrorsReportRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling requestProductDataImportFileErrorsReport'
            );
        }

        $resourcePath = '/reports/product-data-import-file-errors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
