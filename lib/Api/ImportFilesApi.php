<?php
/**
 * ImportFilesApi
 * PHP version 5
 *
 * @category Class
 * @package  Cbdesk\Kauflandv2\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * OpenAPI spec version: 2.9.1
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cbdesk\Kauflandv2\Api\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Cbdesk\Kauflandv2\Api\ApiException;
use Cbdesk\Kauflandv2\Api\Configuration;
use Cbdesk\Kauflandv2\Api\HeaderSelector;
use Cbdesk\Kauflandv2\Api\ObjectSerializer;

/**
 * ImportFilesApi Class Doc Comment
 *
 * @category Class
 * @package  Cbdesk\Kauflandv2\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImportFilesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createInventoryCommandImportFile
     *
     * Add an INVENTORY_COMMAND file URL
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileInventoryCommandPostRequest $body body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryCommand_
     */
    public function createInventoryCommandImportFile($body, $storefront)
    {
        list($response) = $this->createInventoryCommandImportFileWithHttpInfo($body, $storefront);
        return $response;
    }

    /**
     * Operation createInventoryCommandImportFileWithHttpInfo
     *
     * Add an INVENTORY_COMMAND file URL
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileInventoryCommandPostRequest $body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryCommand_, HTTP status code, HTTP response headers (array of strings)
     */
    public function createInventoryCommandImportFileWithHttpInfo($body, $storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryCommand_';
        $request = $this->createInventoryCommandImportFileRequest($body, $storefront);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryCommand_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createInventoryCommandImportFileAsync
     *
     * Add an INVENTORY_COMMAND file URL
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileInventoryCommandPostRequest $body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInventoryCommandImportFileAsync($body, $storefront)
    {
        return $this->createInventoryCommandImportFileAsyncWithHttpInfo($body, $storefront)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInventoryCommandImportFileAsyncWithHttpInfo
     *
     * Add an INVENTORY_COMMAND file URL
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileInventoryCommandPostRequest $body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInventoryCommandImportFileAsyncWithHttpInfo($body, $storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryCommand_';
        $request = $this->createInventoryCommandImportFileRequest($body, $storefront);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInventoryCommandImportFile'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileInventoryCommandPostRequest $body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createInventoryCommandImportFileRequest($body, $storefront)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createInventoryCommandImportFile'
            );
        }
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling createInventoryCommandImportFile'
            );
        }

        $resourcePath = '/import-files/inventory-command';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createInventoryFeedImportFile
     *
     * Add an INVENTORY_FEED file URL
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileInventoryFeedPostRequest $body body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryFeed_
     */
    public function createInventoryFeedImportFile($body, $storefront)
    {
        list($response) = $this->createInventoryFeedImportFileWithHttpInfo($body, $storefront);
        return $response;
    }

    /**
     * Operation createInventoryFeedImportFileWithHttpInfo
     *
     * Add an INVENTORY_FEED file URL
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileInventoryFeedPostRequest $body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryFeed_, HTTP status code, HTTP response headers (array of strings)
     */
    public function createInventoryFeedImportFileWithHttpInfo($body, $storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryFeed_';
        $request = $this->createInventoryFeedImportFileRequest($body, $storefront);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryFeed_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createInventoryFeedImportFileAsync
     *
     * Add an INVENTORY_FEED file URL
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileInventoryFeedPostRequest $body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInventoryFeedImportFileAsync($body, $storefront)
    {
        return $this->createInventoryFeedImportFileAsyncWithHttpInfo($body, $storefront)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInventoryFeedImportFileAsyncWithHttpInfo
     *
     * Add an INVENTORY_FEED file URL
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileInventoryFeedPostRequest $body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInventoryFeedImportFileAsyncWithHttpInfo($body, $storefront)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryFeed_';
        $request = $this->createInventoryFeedImportFileRequest($body, $storefront);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInventoryFeedImportFile'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileInventoryFeedPostRequest $body (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createInventoryFeedImportFileRequest($body, $storefront)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createInventoryFeedImportFile'
            );
        }
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling createInventoryFeedImportFile'
            );
        }

        $resourcePath = '/import-files/inventory-feed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrderCommandImportFile
     *
     * Add an ORDER_COMMAND file URL
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileOrderCommandPostRequest $body body (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileOrderCommand_
     */
    public function createOrderCommandImportFile($body)
    {
        list($response) = $this->createOrderCommandImportFileWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createOrderCommandImportFileWithHttpInfo
     *
     * Add an ORDER_COMMAND file URL
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileOrderCommandPostRequest $body (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileOrderCommand_, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrderCommandImportFileWithHttpInfo($body)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileOrderCommand_';
        $request = $this->createOrderCommandImportFileRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileOrderCommand_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrderCommandImportFileAsync
     *
     * Add an ORDER_COMMAND file URL
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileOrderCommandPostRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrderCommandImportFileAsync($body)
    {
        return $this->createOrderCommandImportFileAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrderCommandImportFileAsyncWithHttpInfo
     *
     * Add an ORDER_COMMAND file URL
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileOrderCommandPostRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrderCommandImportFileAsyncWithHttpInfo($body)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileOrderCommand_';
        $request = $this->createOrderCommandImportFileRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrderCommandImportFile'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFileOrderCommandPostRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createOrderCommandImportFileRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createOrderCommandImportFile'
            );
        }

        $resourcePath = '/import-files/order-command';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInventoryCommandImportFile
     *
     * Get an inventory command import file by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $id_import_file Internal ID of Import File (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryCommand_
     */
    public function getInventoryCommandImportFile($storefront, $id_import_file)
    {
        list($response) = $this->getInventoryCommandImportFileWithHttpInfo($storefront, $id_import_file);
        return $response;
    }

    /**
     * Operation getInventoryCommandImportFileWithHttpInfo
     *
     * Get an inventory command import file by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $id_import_file Internal ID of Import File (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryCommand_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInventoryCommandImportFileWithHttpInfo($storefront, $id_import_file)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryCommand_';
        $request = $this->getInventoryCommandImportFileRequest($storefront, $id_import_file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryCommand_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInventoryCommandImportFileAsync
     *
     * Get an inventory command import file by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $id_import_file Internal ID of Import File (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryCommandImportFileAsync($storefront, $id_import_file)
    {
        return $this->getInventoryCommandImportFileAsyncWithHttpInfo($storefront, $id_import_file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInventoryCommandImportFileAsyncWithHttpInfo
     *
     * Get an inventory command import file by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $id_import_file Internal ID of Import File (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryCommandImportFileAsyncWithHttpInfo($storefront, $id_import_file)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryCommand_';
        $request = $this->getInventoryCommandImportFileRequest($storefront, $id_import_file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInventoryCommandImportFile'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $id_import_file Internal ID of Import File (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInventoryCommandImportFileRequest($storefront, $id_import_file)
    {
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling getInventoryCommandImportFile'
            );
        }
        // verify the required parameter 'id_import_file' is set
        if ($id_import_file === null || (is_array($id_import_file) && count($id_import_file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_import_file when calling getInventoryCommandImportFile'
            );
        }

        $resourcePath = '/import-files/inventory-command/{id_import_file}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }

        // path params
        if ($id_import_file !== null) {
            $resourcePath = str_replace(
                '{' . 'id_import_file' . '}',
                ObjectSerializer::toPathValue($id_import_file),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInventoryCommandImportFiles
     *
     * Get a list of your inventory command import files
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportStatus $status File status filter (optional)
     * @param  \DateTime $ts_created_iso ts_created_iso (optional)
     * @param  \DateTime $ts_updated_iso ts_updated_iso (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFilesSortBy $sort sort (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseImportFileInventoryCommand_
     */
    public function getInventoryCommandImportFiles($storefront, $status = null, $ts_created_iso = null, $ts_updated_iso = null, $sort = null, $limit = '30', $offset = '0')
    {
        list($response) = $this->getInventoryCommandImportFilesWithHttpInfo($storefront, $status, $ts_created_iso, $ts_updated_iso, $sort, $limit, $offset);
        return $response;
    }

    /**
     * Operation getInventoryCommandImportFilesWithHttpInfo
     *
     * Get a list of your inventory command import files
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportStatus $status File status filter (optional)
     * @param  \DateTime $ts_created_iso (optional)
     * @param  \DateTime $ts_updated_iso (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFilesSortBy $sort (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseImportFileInventoryCommand_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInventoryCommandImportFilesWithHttpInfo($storefront, $status = null, $ts_created_iso = null, $ts_updated_iso = null, $sort = null, $limit = '30', $offset = '0')
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseImportFileInventoryCommand_';
        $request = $this->getInventoryCommandImportFilesRequest($storefront, $status, $ts_created_iso, $ts_updated_iso, $sort, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseImportFileInventoryCommand_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInventoryCommandImportFilesAsync
     *
     * Get a list of your inventory command import files
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportStatus $status File status filter (optional)
     * @param  \DateTime $ts_created_iso (optional)
     * @param  \DateTime $ts_updated_iso (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFilesSortBy $sort (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryCommandImportFilesAsync($storefront, $status = null, $ts_created_iso = null, $ts_updated_iso = null, $sort = null, $limit = '30', $offset = '0')
    {
        return $this->getInventoryCommandImportFilesAsyncWithHttpInfo($storefront, $status, $ts_created_iso, $ts_updated_iso, $sort, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInventoryCommandImportFilesAsyncWithHttpInfo
     *
     * Get a list of your inventory command import files
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportStatus $status File status filter (optional)
     * @param  \DateTime $ts_created_iso (optional)
     * @param  \DateTime $ts_updated_iso (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFilesSortBy $sort (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryCommandImportFilesAsyncWithHttpInfo($storefront, $status = null, $ts_created_iso = null, $ts_updated_iso = null, $sort = null, $limit = '30', $offset = '0')
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseImportFileInventoryCommand_';
        $request = $this->getInventoryCommandImportFilesRequest($storefront, $status, $ts_created_iso, $ts_updated_iso, $sort, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInventoryCommandImportFiles'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportStatus $status File status filter (optional)
     * @param  \DateTime $ts_created_iso (optional)
     * @param  \DateTime $ts_updated_iso (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFilesSortBy $sort (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInventoryCommandImportFilesRequest($storefront, $status = null, $ts_created_iso = null, $ts_updated_iso = null, $sort = null, $limit = '30', $offset = '0')
    {
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling getInventoryCommandImportFiles'
            );
        }

        $resourcePath = '/import-files/inventory-command';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status, null);
        }
        // query params
        if ($ts_created_iso !== null) {
            $queryParams['ts_created_iso'] = ObjectSerializer::toQueryValue($ts_created_iso, 'date-time');
        }
        // query params
        if ($ts_updated_iso !== null) {
            $queryParams['ts_updated_iso'] = ObjectSerializer::toQueryValue($ts_updated_iso, 'date-time');
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInventoryFeedImportFile
     *
     * Get an inventory feed import file by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $id_import_file Internal ID of Import File (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryFeed_
     */
    public function getInventoryFeedImportFile($storefront, $id_import_file)
    {
        list($response) = $this->getInventoryFeedImportFileWithHttpInfo($storefront, $id_import_file);
        return $response;
    }

    /**
     * Operation getInventoryFeedImportFileWithHttpInfo
     *
     * Get an inventory feed import file by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $id_import_file Internal ID of Import File (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryFeed_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInventoryFeedImportFileWithHttpInfo($storefront, $id_import_file)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryFeed_';
        $request = $this->getInventoryFeedImportFileRequest($storefront, $id_import_file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryFeed_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInventoryFeedImportFileAsync
     *
     * Get an inventory feed import file by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $id_import_file Internal ID of Import File (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryFeedImportFileAsync($storefront, $id_import_file)
    {
        return $this->getInventoryFeedImportFileAsyncWithHttpInfo($storefront, $id_import_file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInventoryFeedImportFileAsyncWithHttpInfo
     *
     * Get an inventory feed import file by ID
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $id_import_file Internal ID of Import File (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryFeedImportFileAsyncWithHttpInfo($storefront, $id_import_file)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileInventoryFeed_';
        $request = $this->getInventoryFeedImportFileRequest($storefront, $id_import_file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInventoryFeedImportFile'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  int $id_import_file Internal ID of Import File (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInventoryFeedImportFileRequest($storefront, $id_import_file)
    {
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling getInventoryFeedImportFile'
            );
        }
        // verify the required parameter 'id_import_file' is set
        if ($id_import_file === null || (is_array($id_import_file) && count($id_import_file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_import_file when calling getInventoryFeedImportFile'
            );
        }

        $resourcePath = '/import-files/inventory-feed/{id_import_file}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }

        // path params
        if ($id_import_file !== null) {
            $resourcePath = str_replace(
                '{' . 'id_import_file' . '}',
                ObjectSerializer::toPathValue($id_import_file),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInventoryFeedImportFiles
     *
     * Get a list of your inventory feed import files
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportStatus $status File status filter (optional)
     * @param  \DateTime $ts_created_iso ts_created_iso (optional)
     * @param  \DateTime $ts_updated_iso ts_updated_iso (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFilesSortBy $sort sort (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseImportFileInventoryFeed_
     */
    public function getInventoryFeedImportFiles($storefront, $status = null, $ts_created_iso = null, $ts_updated_iso = null, $sort = null, $limit = '30', $offset = '0')
    {
        list($response) = $this->getInventoryFeedImportFilesWithHttpInfo($storefront, $status, $ts_created_iso, $ts_updated_iso, $sort, $limit, $offset);
        return $response;
    }

    /**
     * Operation getInventoryFeedImportFilesWithHttpInfo
     *
     * Get a list of your inventory feed import files
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportStatus $status File status filter (optional)
     * @param  \DateTime $ts_created_iso (optional)
     * @param  \DateTime $ts_updated_iso (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFilesSortBy $sort (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseImportFileInventoryFeed_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInventoryFeedImportFilesWithHttpInfo($storefront, $status = null, $ts_created_iso = null, $ts_updated_iso = null, $sort = null, $limit = '30', $offset = '0')
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseImportFileInventoryFeed_';
        $request = $this->getInventoryFeedImportFilesRequest($storefront, $status, $ts_created_iso, $ts_updated_iso, $sort, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseImportFileInventoryFeed_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInventoryFeedImportFilesAsync
     *
     * Get a list of your inventory feed import files
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportStatus $status File status filter (optional)
     * @param  \DateTime $ts_created_iso (optional)
     * @param  \DateTime $ts_updated_iso (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFilesSortBy $sort (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryFeedImportFilesAsync($storefront, $status = null, $ts_created_iso = null, $ts_updated_iso = null, $sort = null, $limit = '30', $offset = '0')
    {
        return $this->getInventoryFeedImportFilesAsyncWithHttpInfo($storefront, $status, $ts_created_iso, $ts_updated_iso, $sort, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInventoryFeedImportFilesAsyncWithHttpInfo
     *
     * Get a list of your inventory feed import files
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportStatus $status File status filter (optional)
     * @param  \DateTime $ts_created_iso (optional)
     * @param  \DateTime $ts_updated_iso (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFilesSortBy $sort (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInventoryFeedImportFilesAsyncWithHttpInfo($storefront, $status = null, $ts_created_iso = null, $ts_updated_iso = null, $sort = null, $limit = '30', $offset = '0')
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseImportFileInventoryFeed_';
        $request = $this->getInventoryFeedImportFilesRequest($storefront, $status, $ts_created_iso, $ts_updated_iso, $sort, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInventoryFeedImportFiles'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\Storefront $storefront Parameter to select the affected storefront (required)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportStatus $status File status filter (optional)
     * @param  \DateTime $ts_created_iso (optional)
     * @param  \DateTime $ts_updated_iso (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFilesSortBy $sort (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInventoryFeedImportFilesRequest($storefront, $status = null, $ts_created_iso = null, $ts_updated_iso = null, $sort = null, $limit = '30', $offset = '0')
    {
        // verify the required parameter 'storefront' is set
        if ($storefront === null || (is_array($storefront) && count($storefront) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront when calling getInventoryFeedImportFiles'
            );
        }

        $resourcePath = '/import-files/inventory-feed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status, null);
        }
        // query params
        if ($ts_created_iso !== null) {
            $queryParams['ts_created_iso'] = ObjectSerializer::toQueryValue($ts_created_iso, 'date-time');
        }
        // query params
        if ($ts_updated_iso !== null) {
            $queryParams['ts_updated_iso'] = ObjectSerializer::toQueryValue($ts_updated_iso, 'date-time');
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderCommandImportFile
     *
     * Get an order command import file by ID
     *
     * @param  int $id_import_file Internal ID of Import File (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileOrderCommand_
     */
    public function getOrderCommandImportFile($id_import_file)
    {
        list($response) = $this->getOrderCommandImportFileWithHttpInfo($id_import_file);
        return $response;
    }

    /**
     * Operation getOrderCommandImportFileWithHttpInfo
     *
     * Get an order command import file by ID
     *
     * @param  int $id_import_file Internal ID of Import File (required)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileOrderCommand_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderCommandImportFileWithHttpInfo($id_import_file)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileOrderCommand_';
        $request = $this->getOrderCommandImportFileRequest($id_import_file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileOrderCommand_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderCommandImportFileAsync
     *
     * Get an order command import file by ID
     *
     * @param  int $id_import_file Internal ID of Import File (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderCommandImportFileAsync($id_import_file)
    {
        return $this->getOrderCommandImportFileAsyncWithHttpInfo($id_import_file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderCommandImportFileAsyncWithHttpInfo
     *
     * Get an order command import file by ID
     *
     * @param  int $id_import_file Internal ID of Import File (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderCommandImportFileAsyncWithHttpInfo($id_import_file)
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\ApiResponseImportFileOrderCommand_';
        $request = $this->getOrderCommandImportFileRequest($id_import_file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderCommandImportFile'
     *
     * @param  int $id_import_file Internal ID of Import File (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderCommandImportFileRequest($id_import_file)
    {
        // verify the required parameter 'id_import_file' is set
        if ($id_import_file === null || (is_array($id_import_file) && count($id_import_file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_import_file when calling getOrderCommandImportFile'
            );
        }

        $resourcePath = '/import-files/order-command/{id_import_file}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_import_file !== null) {
            $resourcePath = str_replace(
                '{' . 'id_import_file' . '}',
                ObjectSerializer::toPathValue($id_import_file),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderCommandImportFiles
     *
     * Get a list of your order command import files
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportStatus $status File status filter (optional)
     * @param  \DateTime $ts_created_iso ts_created_iso (optional)
     * @param  \DateTime $ts_updated_iso ts_updated_iso (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFilesSortBy $sort sort (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseImportFileOrderCommand_
     */
    public function getOrderCommandImportFiles($status = null, $ts_created_iso = null, $ts_updated_iso = null, $sort = null, $limit = '30', $offset = '0')
    {
        list($response) = $this->getOrderCommandImportFilesWithHttpInfo($status, $ts_created_iso, $ts_updated_iso, $sort, $limit, $offset);
        return $response;
    }

    /**
     * Operation getOrderCommandImportFilesWithHttpInfo
     *
     * Get a list of your order command import files
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportStatus $status File status filter (optional)
     * @param  \DateTime $ts_created_iso (optional)
     * @param  \DateTime $ts_updated_iso (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFilesSortBy $sort (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     *
     * @throws \Cbdesk\Kauflandv2\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseImportFileOrderCommand_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderCommandImportFilesWithHttpInfo($status = null, $ts_created_iso = null, $ts_updated_iso = null, $sort = null, $limit = '30', $offset = '0')
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseImportFileOrderCommand_';
        $request = $this->getOrderCommandImportFilesRequest($status, $ts_created_iso, $ts_updated_iso, $sort, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseImportFileOrderCommand_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cbdesk\Kauflandv2\Api\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderCommandImportFilesAsync
     *
     * Get a list of your order command import files
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportStatus $status File status filter (optional)
     * @param  \DateTime $ts_created_iso (optional)
     * @param  \DateTime $ts_updated_iso (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFilesSortBy $sort (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderCommandImportFilesAsync($status = null, $ts_created_iso = null, $ts_updated_iso = null, $sort = null, $limit = '30', $offset = '0')
    {
        return $this->getOrderCommandImportFilesAsyncWithHttpInfo($status, $ts_created_iso, $ts_updated_iso, $sort, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderCommandImportFilesAsyncWithHttpInfo
     *
     * Get a list of your order command import files
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportStatus $status File status filter (optional)
     * @param  \DateTime $ts_created_iso (optional)
     * @param  \DateTime $ts_updated_iso (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFilesSortBy $sort (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderCommandImportFilesAsyncWithHttpInfo($status = null, $ts_created_iso = null, $ts_updated_iso = null, $sort = null, $limit = '30', $offset = '0')
    {
        $returnType = '\Cbdesk\Kauflandv2\Api\Model\CollectionApiResponseImportFileOrderCommand_';
        $request = $this->getOrderCommandImportFilesRequest($status, $ts_created_iso, $ts_updated_iso, $sort, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderCommandImportFiles'
     *
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportStatus $status File status filter (optional)
     * @param  \DateTime $ts_created_iso (optional)
     * @param  \DateTime $ts_updated_iso (optional)
     * @param  \Cbdesk\Kauflandv2\Api\Model\ImportFilesSortBy $sort (optional)
     * @param  int $limit Desired size of result set (optional, default to 30)
     * @param  int $offset Offset applied to result set (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderCommandImportFilesRequest($status = null, $ts_created_iso = null, $ts_updated_iso = null, $sort = null, $limit = '30', $offset = '0')
    {

        $resourcePath = '/import-files/order-command';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status, null);
        }
        // query params
        if ($ts_created_iso !== null) {
            $queryParams['ts_created_iso'] = ObjectSerializer::toQueryValue($ts_created_iso, 'date-time');
        }
        // query params
        if ($ts_updated_iso !== null) {
            $queryParams['ts_updated_iso'] = ObjectSerializer::toQueryValue($ts_updated_iso, 'date-time');
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
