<?php
/**
 * OrderUnitsApi
 * PHP version 5
 *
 * @category Class
 * @package  Kaufland\Seller
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * OpenAPI spec version: 2.13.1
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Kaufland\Seller\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Kaufland\Seller\ApiException;
use Kaufland\Seller\Configuration;
use Kaufland\Seller\HeaderSelector;
use Kaufland\Seller\ObjectSerializer;

/**
 * OrderUnitsApi Class Doc Comment
 *
 * @category Class
 * @package  Kaufland\Seller
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderUnitsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelOrderUnit
     *
     * Cancel an order unit
     *
     * @param  \Kaufland\Seller\Model\OrderUnitCancelRequest $body Reason of the cancellation (required)
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \Kaufland\Seller\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelOrderUnit($body, $id_order_unit)
    {
        $this->cancelOrderUnitWithHttpInfo($body, $id_order_unit);
    }

    /**
     * Operation cancelOrderUnitWithHttpInfo
     *
     * Cancel an order unit
     *
     * @param  \Kaufland\Seller\Model\OrderUnitCancelRequest $body Reason of the cancellation (required)
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \Kaufland\Seller\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelOrderUnitWithHttpInfo($body, $id_order_unit)
    {
        $returnType = '';
        $request = $this->cancelOrderUnitRequest($body, $id_order_unit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelOrderUnitAsync
     *
     * Cancel an order unit
     *
     * @param  \Kaufland\Seller\Model\OrderUnitCancelRequest $body Reason of the cancellation (required)
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderUnitAsync($body, $id_order_unit)
    {
        return $this->cancelOrderUnitAsyncWithHttpInfo($body, $id_order_unit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelOrderUnitAsyncWithHttpInfo
     *
     * Cancel an order unit
     *
     * @param  \Kaufland\Seller\Model\OrderUnitCancelRequest $body Reason of the cancellation (required)
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderUnitAsyncWithHttpInfo($body, $id_order_unit)
    {
        $returnType = '';
        $request = $this->cancelOrderUnitRequest($body, $id_order_unit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelOrderUnit'
     *
     * @param  \Kaufland\Seller\Model\OrderUnitCancelRequest $body Reason of the cancellation (required)
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelOrderUnitRequest($body, $id_order_unit)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling cancelOrderUnit'
            );
        }
        // verify the required parameter 'id_order_unit' is set
        if ($id_order_unit === null || (is_array($id_order_unit) && count($id_order_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_order_unit when calling cancelOrderUnit'
            );
        }

        $resourcePath = '/order-units/{id_order_unit}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_order_unit !== null) {
            $resourcePath = str_replace(
                '{' . 'id_order_unit' . '}',
                ObjectSerializer::toPathValue($id_order_unit),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fulfilOrderUnit
     *
     * Mark an order unit to be in fulfillment
     *
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \Kaufland\Seller\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function fulfilOrderUnit($id_order_unit)
    {
        $this->fulfilOrderUnitWithHttpInfo($id_order_unit);
    }

    /**
     * Operation fulfilOrderUnitWithHttpInfo
     *
     * Mark an order unit to be in fulfillment
     *
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \Kaufland\Seller\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function fulfilOrderUnitWithHttpInfo($id_order_unit)
    {
        $returnType = '';
        $request = $this->fulfilOrderUnitRequest($id_order_unit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fulfilOrderUnitAsync
     *
     * Mark an order unit to be in fulfillment
     *
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fulfilOrderUnitAsync($id_order_unit)
    {
        return $this->fulfilOrderUnitAsyncWithHttpInfo($id_order_unit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fulfilOrderUnitAsyncWithHttpInfo
     *
     * Mark an order unit to be in fulfillment
     *
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fulfilOrderUnitAsyncWithHttpInfo($id_order_unit)
    {
        $returnType = '';
        $request = $this->fulfilOrderUnitRequest($id_order_unit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fulfilOrderUnit'
     *
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fulfilOrderUnitRequest($id_order_unit)
    {
        // verify the required parameter 'id_order_unit' is set
        if ($id_order_unit === null || (is_array($id_order_unit) && count($id_order_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_order_unit when calling fulfilOrderUnit'
            );
        }

        $resourcePath = '/order-units/{id_order_unit}/fulfil';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_order_unit !== null) {
            $resourcePath = str_replace(
                '{' . 'id_order_unit' . '}',
                ObjectSerializer::toPathValue($id_order_unit),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderUnit
     *
     * Get an order unit by ID
     *
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     * @param  \Kaufland\Seller\Model\OrderUnitEmbeddable[] $embedded Additional data to be returned (optional)
     *
     * @throws \Kaufland\Seller\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kaufland\Seller\Model\ApiResponseOrderUnitDetails_
     */
    public function getOrderUnit($id_order_unit, $embedded = null)
    {
        list($response) = $this->getOrderUnitWithHttpInfo($id_order_unit, $embedded);
        return $response;
    }

    /**
     * Operation getOrderUnitWithHttpInfo
     *
     * Get an order unit by ID
     *
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     * @param  \Kaufland\Seller\Model\OrderUnitEmbeddable[] $embedded Additional data to be returned (optional)
     *
     * @throws \Kaufland\Seller\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kaufland\Seller\Model\ApiResponseOrderUnitDetails_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderUnitWithHttpInfo($id_order_unit, $embedded = null)
    {
        $returnType = '\Kaufland\Seller\Model\ApiResponseOrderUnitDetails_';
        $request = $this->getOrderUnitRequest($id_order_unit, $embedded);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ApiResponseOrderUnitDetails_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderUnitAsync
     *
     * Get an order unit by ID
     *
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     * @param  \Kaufland\Seller\Model\OrderUnitEmbeddable[] $embedded Additional data to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderUnitAsync($id_order_unit, $embedded = null)
    {
        return $this->getOrderUnitAsyncWithHttpInfo($id_order_unit, $embedded)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderUnitAsyncWithHttpInfo
     *
     * Get an order unit by ID
     *
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     * @param  \Kaufland\Seller\Model\OrderUnitEmbeddable[] $embedded Additional data to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderUnitAsyncWithHttpInfo($id_order_unit, $embedded = null)
    {
        $returnType = '\Kaufland\Seller\Model\ApiResponseOrderUnitDetails_';
        $request = $this->getOrderUnitRequest($id_order_unit, $embedded);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderUnit'
     *
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     * @param  \Kaufland\Seller\Model\OrderUnitEmbeddable[] $embedded Additional data to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderUnitRequest($id_order_unit, $embedded = null)
    {
        // verify the required parameter 'id_order_unit' is set
        if ($id_order_unit === null || (is_array($id_order_unit) && count($id_order_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_order_unit when calling getOrderUnit'
            );
        }

        $resourcePath = '/order-units/{id_order_unit}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($embedded)) {
            $embedded = ObjectSerializer::serializeCollection($embedded, 'multi', true);
        }
        if ($embedded !== null) {
            $queryParams['embedded'] = ObjectSerializer::toQueryValue($embedded, null);
        }

        // path params
        if ($id_order_unit !== null) {
            $resourcePath = str_replace(
                '{' . 'id_order_unit' . '}',
                ObjectSerializer::toPathValue($id_order_unit),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderUnits
     *
     * Get a list of order units
     *
     * @param  \Kaufland\Seller\Model\Storefront $storefront Locale of storefront (optional)
     * @param  string $id_offer Unique ID for offer(s) (optional)
     * @param  \Kaufland\Seller\Model\OrderUnitStatus[] $status Get only order units which are in the given status (optional)
     * @param  \DateTime $ts_created_from_iso Get only order units which were placed after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \DateTime $ts_updated_from_iso Get only order units which were updated after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \Kaufland\Seller\Model\FulfillmentType[] $fulfillment_type Get only order units which are fulfilled by the given type (optional, default to ["fulfilled_by_merchant"])
     * @param  string $sort Specify sorting (optional, default to ts_created:desc)
     * @param  int $limit Desired size of result set&lt;br&gt;max: 100, default: 30 (optional, default to 30)
     * @param  int $offset Offset applied to result set&lt;br&gt;default: 0 (optional, default to 0)
     *
     * @throws \Kaufland\Seller\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kaufland\Seller\Model\CollectionApiResponseOrderUnit_
     */
    public function getOrderUnits($storefront = null, $id_offer = null, $status = null, $ts_created_from_iso = null, $ts_updated_from_iso = null, $fulfillment_type = '["fulfilled_by_merchant"]', $sort = 'ts_created:desc', $limit = '30', $offset = '0')
    {
        list($response) = $this->getOrderUnitsWithHttpInfo($storefront, $id_offer, $status, $ts_created_from_iso, $ts_updated_from_iso, $fulfillment_type, $sort, $limit, $offset);
        return $response;
    }

    /**
     * Operation getOrderUnitsWithHttpInfo
     *
     * Get a list of order units
     *
     * @param  \Kaufland\Seller\Model\Storefront $storefront Locale of storefront (optional)
     * @param  string $id_offer Unique ID for offer(s) (optional)
     * @param  \Kaufland\Seller\Model\OrderUnitStatus[] $status Get only order units which are in the given status (optional)
     * @param  \DateTime $ts_created_from_iso Get only order units which were placed after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \DateTime $ts_updated_from_iso Get only order units which were updated after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \Kaufland\Seller\Model\FulfillmentType[] $fulfillment_type Get only order units which are fulfilled by the given type (optional, default to ["fulfilled_by_merchant"])
     * @param  string $sort Specify sorting (optional, default to ts_created:desc)
     * @param  int $limit Desired size of result set&lt;br&gt;max: 100, default: 30 (optional, default to 30)
     * @param  int $offset Offset applied to result set&lt;br&gt;default: 0 (optional, default to 0)
     *
     * @throws \Kaufland\Seller\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kaufland\Seller\Model\CollectionApiResponseOrderUnit_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderUnitsWithHttpInfo($storefront = null, $id_offer = null, $status = null, $ts_created_from_iso = null, $ts_updated_from_iso = null, $fulfillment_type = '["fulfilled_by_merchant"]', $sort = 'ts_created:desc', $limit = '30', $offset = '0')
    {
        $returnType = '\Kaufland\Seller\Model\CollectionApiResponseOrderUnit_';
        $request = $this->getOrderUnitsRequest($storefront, $id_offer, $status, $ts_created_from_iso, $ts_updated_from_iso, $fulfillment_type, $sort, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\CollectionApiResponseOrderUnit_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderUnitsAsync
     *
     * Get a list of order units
     *
     * @param  \Kaufland\Seller\Model\Storefront $storefront Locale of storefront (optional)
     * @param  string $id_offer Unique ID for offer(s) (optional)
     * @param  \Kaufland\Seller\Model\OrderUnitStatus[] $status Get only order units which are in the given status (optional)
     * @param  \DateTime $ts_created_from_iso Get only order units which were placed after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \DateTime $ts_updated_from_iso Get only order units which were updated after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \Kaufland\Seller\Model\FulfillmentType[] $fulfillment_type Get only order units which are fulfilled by the given type (optional, default to ["fulfilled_by_merchant"])
     * @param  string $sort Specify sorting (optional, default to ts_created:desc)
     * @param  int $limit Desired size of result set&lt;br&gt;max: 100, default: 30 (optional, default to 30)
     * @param  int $offset Offset applied to result set&lt;br&gt;default: 0 (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderUnitsAsync($storefront = null, $id_offer = null, $status = null, $ts_created_from_iso = null, $ts_updated_from_iso = null, $fulfillment_type = '["fulfilled_by_merchant"]', $sort = 'ts_created:desc', $limit = '30', $offset = '0')
    {
        return $this->getOrderUnitsAsyncWithHttpInfo($storefront, $id_offer, $status, $ts_created_from_iso, $ts_updated_from_iso, $fulfillment_type, $sort, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderUnitsAsyncWithHttpInfo
     *
     * Get a list of order units
     *
     * @param  \Kaufland\Seller\Model\Storefront $storefront Locale of storefront (optional)
     * @param  string $id_offer Unique ID for offer(s) (optional)
     * @param  \Kaufland\Seller\Model\OrderUnitStatus[] $status Get only order units which are in the given status (optional)
     * @param  \DateTime $ts_created_from_iso Get only order units which were placed after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \DateTime $ts_updated_from_iso Get only order units which were updated after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \Kaufland\Seller\Model\FulfillmentType[] $fulfillment_type Get only order units which are fulfilled by the given type (optional, default to ["fulfilled_by_merchant"])
     * @param  string $sort Specify sorting (optional, default to ts_created:desc)
     * @param  int $limit Desired size of result set&lt;br&gt;max: 100, default: 30 (optional, default to 30)
     * @param  int $offset Offset applied to result set&lt;br&gt;default: 0 (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderUnitsAsyncWithHttpInfo($storefront = null, $id_offer = null, $status = null, $ts_created_from_iso = null, $ts_updated_from_iso = null, $fulfillment_type = '["fulfilled_by_merchant"]', $sort = 'ts_created:desc', $limit = '30', $offset = '0')
    {
        $returnType = '\Kaufland\Seller\Model\CollectionApiResponseOrderUnit_';
        $request = $this->getOrderUnitsRequest($storefront, $id_offer, $status, $ts_created_from_iso, $ts_updated_from_iso, $fulfillment_type, $sort, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderUnits'
     *
     * @param  \Kaufland\Seller\Model\Storefront $storefront Locale of storefront (optional)
     * @param  string $id_offer Unique ID for offer(s) (optional)
     * @param  \Kaufland\Seller\Model\OrderUnitStatus[] $status Get only order units which are in the given status (optional)
     * @param  \DateTime $ts_created_from_iso Get only order units which were placed after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \DateTime $ts_updated_from_iso Get only order units which were updated after this timestamp. Should be in YYYY-MM-ddTHH:mm:ssZ format (optional)
     * @param  \Kaufland\Seller\Model\FulfillmentType[] $fulfillment_type Get only order units which are fulfilled by the given type (optional, default to ["fulfilled_by_merchant"])
     * @param  string $sort Specify sorting (optional, default to ts_created:desc)
     * @param  int $limit Desired size of result set&lt;br&gt;max: 100, default: 30 (optional, default to 30)
     * @param  int $offset Offset applied to result set&lt;br&gt;default: 0 (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderUnitsRequest($storefront = null, $id_offer = null, $status = null, $ts_created_from_iso = null, $ts_updated_from_iso = null, $fulfillment_type = '["fulfilled_by_merchant"]', $sort = 'ts_created:desc', $limit = '30', $offset = '0')
    {

        $resourcePath = '/order-units';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront !== null) {
            $queryParams['storefront'] = ObjectSerializer::toQueryValue($storefront, null);
        }
        // query params
        if ($id_offer !== null) {
            $queryParams['id_offer'] = ObjectSerializer::toQueryValue($id_offer, null);
        }
        // query params
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, 'multi', true);
        }
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status, null);
        }
        // query params
        if ($ts_created_from_iso !== null) {
            $queryParams['ts_created_from_iso'] = ObjectSerializer::toQueryValue($ts_created_from_iso, 'date-time');
        }
        // query params
        if ($ts_updated_from_iso !== null) {
            $queryParams['ts_updated_from_iso'] = ObjectSerializer::toQueryValue($ts_updated_from_iso, 'date-time');
        }
        // query params
        if (is_array($fulfillment_type)) {
            $fulfillment_type = ObjectSerializer::serializeCollection($fulfillment_type, 'multi', true);
        }
        if ($fulfillment_type !== null) {
            $queryParams['fulfillment_type'] = ObjectSerializer::toQueryValue($fulfillment_type, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refundOrderUnit
     *
     * Send a refund to a customer
     *
     * @param  \Kaufland\Seller\Model\OrderUnitRefundRequest $body Request body containing amount and reason of the refund. (required)
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \Kaufland\Seller\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function refundOrderUnit($body, $id_order_unit)
    {
        $this->refundOrderUnitWithHttpInfo($body, $id_order_unit);
    }

    /**
     * Operation refundOrderUnitWithHttpInfo
     *
     * Send a refund to a customer
     *
     * @param  \Kaufland\Seller\Model\OrderUnitRefundRequest $body Request body containing amount and reason of the refund. (required)
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \Kaufland\Seller\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function refundOrderUnitWithHttpInfo($body, $id_order_unit)
    {
        $returnType = '';
        $request = $this->refundOrderUnitRequest($body, $id_order_unit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refundOrderUnitAsync
     *
     * Send a refund to a customer
     *
     * @param  \Kaufland\Seller\Model\OrderUnitRefundRequest $body Request body containing amount and reason of the refund. (required)
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundOrderUnitAsync($body, $id_order_unit)
    {
        return $this->refundOrderUnitAsyncWithHttpInfo($body, $id_order_unit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refundOrderUnitAsyncWithHttpInfo
     *
     * Send a refund to a customer
     *
     * @param  \Kaufland\Seller\Model\OrderUnitRefundRequest $body Request body containing amount and reason of the refund. (required)
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundOrderUnitAsyncWithHttpInfo($body, $id_order_unit)
    {
        $returnType = '';
        $request = $this->refundOrderUnitRequest($body, $id_order_unit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refundOrderUnit'
     *
     * @param  \Kaufland\Seller\Model\OrderUnitRefundRequest $body Request body containing amount and reason of the refund. (required)
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function refundOrderUnitRequest($body, $id_order_unit)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling refundOrderUnit'
            );
        }
        // verify the required parameter 'id_order_unit' is set
        if ($id_order_unit === null || (is_array($id_order_unit) && count($id_order_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_order_unit when calling refundOrderUnit'
            );
        }

        $resourcePath = '/order-units/{id_order_unit}/refund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_order_unit !== null) {
            $resourcePath = str_replace(
                '{' . 'id_order_unit' . '}',
                ObjectSerializer::toPathValue($id_order_unit),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendOrderUnit
     *
     * Mark an order unit as sent
     *
     * @param  \Kaufland\Seller\Model\OrderUnitSendRequest $body Request body containing tracking number(s) and carrier code of the shipment(s) (required)
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \Kaufland\Seller\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendOrderUnit($body, $id_order_unit)
    {
        $this->sendOrderUnitWithHttpInfo($body, $id_order_unit);
    }

    /**
     * Operation sendOrderUnitWithHttpInfo
     *
     * Mark an order unit as sent
     *
     * @param  \Kaufland\Seller\Model\OrderUnitSendRequest $body Request body containing tracking number(s) and carrier code of the shipment(s) (required)
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \Kaufland\Seller\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendOrderUnitWithHttpInfo($body, $id_order_unit)
    {
        $returnType = '';
        $request = $this->sendOrderUnitRequest($body, $id_order_unit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kaufland\Seller\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendOrderUnitAsync
     *
     * Mark an order unit as sent
     *
     * @param  \Kaufland\Seller\Model\OrderUnitSendRequest $body Request body containing tracking number(s) and carrier code of the shipment(s) (required)
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendOrderUnitAsync($body, $id_order_unit)
    {
        return $this->sendOrderUnitAsyncWithHttpInfo($body, $id_order_unit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendOrderUnitAsyncWithHttpInfo
     *
     * Mark an order unit as sent
     *
     * @param  \Kaufland\Seller\Model\OrderUnitSendRequest $body Request body containing tracking number(s) and carrier code of the shipment(s) (required)
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendOrderUnitAsyncWithHttpInfo($body, $id_order_unit)
    {
        $returnType = '';
        $request = $this->sendOrderUnitRequest($body, $id_order_unit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendOrderUnit'
     *
     * @param  \Kaufland\Seller\Model\OrderUnitSendRequest $body Request body containing tracking number(s) and carrier code of the shipment(s) (required)
     * @param  int $id_order_unit Order unit ID, unique across all order units (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendOrderUnitRequest($body, $id_order_unit)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling sendOrderUnit'
            );
        }
        // verify the required parameter 'id_order_unit' is set
        if ($id_order_unit === null || (is_array($id_order_unit) && count($id_order_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_order_unit when calling sendOrderUnit'
            );
        }

        $resourcePath = '/order-units/{id_order_unit}/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_order_unit !== null) {
            $resourcePath = str_replace(
                '{' . 'id_order_unit' . '}',
                ObjectSerializer::toPathValue($id_order_unit),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
