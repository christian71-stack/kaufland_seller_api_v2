<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  Kaufland\Seller
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * OpenAPI spec version: 2.13.1
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Kaufland\Seller\Model;

use \ArrayAccess;
use \Kaufland\Seller\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @package  Kaufland\Seller
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Order implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id_order' => 'string',
        'ts_created_iso' => '\DateTime',
        'is_marketplace_deemed_supplier' => 'bool',
        'order_units_count' => '\Kaufland\Seller\Model\Integer',
        'ts_units_updated_iso' => '\DateTime',
        'storefront' => '\Kaufland\Seller\Model\Storefront',
        'fulfillment_type' => '\Kaufland\Seller\Model\FulfillmentType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id_order' => null,
        'ts_created_iso' => 'date-time',
        'is_marketplace_deemed_supplier' => null,
        'order_units_count' => null,
        'ts_units_updated_iso' => 'date-time',
        'storefront' => null,
        'fulfillment_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_order' => 'id_order',
        'ts_created_iso' => 'ts_created_iso',
        'is_marketplace_deemed_supplier' => 'is_marketplace_deemed_supplier',
        'order_units_count' => 'order_units_count',
        'ts_units_updated_iso' => 'ts_units_updated_iso',
        'storefront' => 'storefront',
        'fulfillment_type' => 'fulfillment_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_order' => 'setIdOrder',
        'ts_created_iso' => 'setTsCreatedIso',
        'is_marketplace_deemed_supplier' => 'setIsMarketplaceDeemedSupplier',
        'order_units_count' => 'setOrderUnitsCount',
        'ts_units_updated_iso' => 'setTsUnitsUpdatedIso',
        'storefront' => 'setStorefront',
        'fulfillment_type' => 'setFulfillmentType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_order' => 'getIdOrder',
        'ts_created_iso' => 'getTsCreatedIso',
        'is_marketplace_deemed_supplier' => 'getIsMarketplaceDeemedSupplier',
        'order_units_count' => 'getOrderUnitsCount',
        'ts_units_updated_iso' => 'getTsUnitsUpdatedIso',
        'storefront' => 'getStorefront',
        'fulfillment_type' => 'getFulfillmentType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_order'] = isset($data['id_order']) ? $data['id_order'] : null;
        $this->container['ts_created_iso'] = isset($data['ts_created_iso']) ? $data['ts_created_iso'] : null;
        $this->container['is_marketplace_deemed_supplier'] = isset($data['is_marketplace_deemed_supplier']) ? $data['is_marketplace_deemed_supplier'] : null;
        $this->container['order_units_count'] = isset($data['order_units_count']) ? $data['order_units_count'] : null;
        $this->container['ts_units_updated_iso'] = isset($data['ts_units_updated_iso']) ? $data['ts_units_updated_iso'] : null;
        $this->container['storefront'] = isset($data['storefront']) ? $data['storefront'] : null;
        $this->container['fulfillment_type'] = isset($data['fulfillment_type']) ? $data['fulfillment_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id_order'] === null) {
            $invalidProperties[] = "'id_order' can't be null";
        }
        if ($this->container['ts_created_iso'] === null) {
            $invalidProperties[] = "'ts_created_iso' can't be null";
        }
        if ($this->container['is_marketplace_deemed_supplier'] === null) {
            $invalidProperties[] = "'is_marketplace_deemed_supplier' can't be null";
        }
        if ($this->container['order_units_count'] === null) {
            $invalidProperties[] = "'order_units_count' can't be null";
        }
        if ($this->container['ts_units_updated_iso'] === null) {
            $invalidProperties[] = "'ts_units_updated_iso' can't be null";
        }
        if ($this->container['storefront'] === null) {
            $invalidProperties[] = "'storefront' can't be null";
        }
        if ($this->container['fulfillment_type'] === null) {
            $invalidProperties[] = "'fulfillment_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_order
     *
     * @return string
     */
    public function getIdOrder()
    {
        return $this->container['id_order'];
    }

    /**
     * Sets id_order
     *
     * @param string $id_order id_order
     *
     * @return $this
     */
    public function setIdOrder($id_order)
    {
        $this->container['id_order'] = $id_order;

        return $this;
    }

    /**
     * Gets ts_created_iso
     *
     * @return \DateTime
     */
    public function getTsCreatedIso()
    {
        return $this->container['ts_created_iso'];
    }

    /**
     * Sets ts_created_iso
     *
     * @param \DateTime $ts_created_iso ts_created_iso
     *
     * @return $this
     */
    public function setTsCreatedIso($ts_created_iso)
    {
        $this->container['ts_created_iso'] = $ts_created_iso;

        return $this;
    }

    /**
     * Gets is_marketplace_deemed_supplier
     *
     * @return bool
     */
    public function getIsMarketplaceDeemedSupplier()
    {
        return $this->container['is_marketplace_deemed_supplier'];
    }

    /**
     * Sets is_marketplace_deemed_supplier
     *
     * @param bool $is_marketplace_deemed_supplier is_marketplace_deemed_supplier
     *
     * @return $this
     */
    public function setIsMarketplaceDeemedSupplier($is_marketplace_deemed_supplier)
    {
        $this->container['is_marketplace_deemed_supplier'] = $is_marketplace_deemed_supplier;

        return $this;
    }

    /**
     * Gets order_units_count
     *
     * @return \Kaufland\Seller\Model\Integer
     */
    public function getOrderUnitsCount()
    {
        return $this->container['order_units_count'];
    }

    /**
     * Sets order_units_count
     *
     * @param \Kaufland\Seller\Model\Integer $order_units_count order_units_count
     *
     * @return $this
     */
    public function setOrderUnitsCount($order_units_count)
    {
        $this->container['order_units_count'] = $order_units_count;

        return $this;
    }

    /**
     * Gets ts_units_updated_iso
     *
     * @return \DateTime
     */
    public function getTsUnitsUpdatedIso()
    {
        return $this->container['ts_units_updated_iso'];
    }

    /**
     * Sets ts_units_updated_iso
     *
     * @param \DateTime $ts_units_updated_iso ts_units_updated_iso
     *
     * @return $this
     */
    public function setTsUnitsUpdatedIso($ts_units_updated_iso)
    {
        $this->container['ts_units_updated_iso'] = $ts_units_updated_iso;

        return $this;
    }

    /**
     * Gets storefront
     *
     * @return \Kaufland\Seller\Model\Storefront
     */
    public function getStorefront()
    {
        return $this->container['storefront'];
    }

    /**
     * Sets storefront
     *
     * @param \Kaufland\Seller\Model\Storefront $storefront storefront
     *
     * @return $this
     */
    public function setStorefront($storefront)
    {
        $this->container['storefront'] = $storefront;

        return $this;
    }

    /**
     * Gets fulfillment_type
     *
     * @return \Kaufland\Seller\Model\FulfillmentType
     */
    public function getFulfillmentType()
    {
        return $this->container['fulfillment_type'];
    }

    /**
     * Sets fulfillment_type
     *
     * @param \Kaufland\Seller\Model\FulfillmentType $fulfillment_type fulfillment_type
     *
     * @return $this
     */
    public function setFulfillmentType($fulfillment_type)
    {
        $this->container['fulfillment_type'] = $fulfillment_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
